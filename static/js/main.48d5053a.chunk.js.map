{"version":3,"sources":["apiClient.js","Footer.js","CalendarComponents/sessionDate.js","CalendarComponents/sessionInfo.js","images/logo.png","NavBar.js","Dashboards/VolunteerDashboard/VolunteerCalendar.js","Profilepage/Profile.js","Profilepage/PPVolunteer.js","Profilepage/ChangePassword.js","Profilepage/VolunteerProfile.js","Dashboards/UserDashboard/UserProfile.js","Dashboards/CgaDashboard/CgaCalendar.js","Dashboards/CgaDashboard/CgaNotifications.js","Dashboards/CgaDashboard/CgaDashboard.js","Dashboards/CgaDashboard/CgaCreateSession.js","Dashboards/CgaDashboard/CgaVolunteerAvailability.js","Dashboards/CgaDashboard/CgaCreateSessionMain.js","Dashboards/CgaDashboard/CgaViewUsers.js","Dashboards/UserDashboard/UserCalendar.js","LandingPage.js","CalendarComponents/AutoComplete.js","Dashboards/AdminDashboard/AdminCalendar.js","Dashboards/AdminDashboard/UserRegister.js","UserLoginPage.js","VolunteerLoginPage.js","AdminLoginPage.js","CreateAccount.js","Dashboards/ManagerDashboard/CreateNewArea.js","Dashboards/ManagerDashboard/CreateNewCGA.js","Dashboards/ManagerDashboard/ManagerPage.js","Dashboards/ManagerDashboard/ManagerCalendar.js","App.js","reportWebVitals.js","index.js"],"names":["url","ApiClient","token","logout","removeUser","this","method","data","axios","catch","error","response","status","Promise","reject","apiCall","location","id","dataObj","loc","username","firstname","lastname","emaildata","phonedata","userName","nameFirst","nameLast","email","phone","sessionUser","user","role","date","volunteer","sessionLocation","sessionTimeStart","sessionTimeFinish","userLimit","details","sessionUsers","activeCGA","password","locationdata","namef","namel","pass","a","Footer","props","className","Row","Col","lg","currentUser","href","sessionDate","session","Date","getDay","getMonth","getDate","sessionInfo","name","description","cost","NavBar","history","useHistory","Navbar","Container","Brand","src","navImg","alt","Toggle","Collapse","Nav","activeKey","style","width","links","slice","map","v","i","to","landing","Item","onClick","client","push","VolunteerCalendar","useState","currentMonth","cCurrentMonth","sessions","cSessions","users","cUsers","sort","cSort","currentCga","cCurrentCga","currentVolunteer","_id","currentLocation","currentDate","buildDayName","day","showSessions","sessionsArray","finalSessionsArray","formattedDay","dateFns","sessionsToDisplay","displaySessions","length","undefined","sortedArray","b","sessionEntry","OverlayTrigger","trigger","placement","overlay","popoverClick","rootClose","backgroundColor","color","displaySessionDescription","sessionDateTime","nextMonth","prevMonth","limit","displayMemberNames","members","includes","join","Popover","title","Card","Body","xs","xmlns","height","fill","class","viewBox","d","useEffect","getSessionByLocation","then","getUsers","getCgaByLocation","md","onChange","e","target","value","days","window","innerWidth","renderDays","monthStart","monthEnd","startDate","weekStartsOn","endDate","rows","formattedDate","renderCells","Profile","locations","cLocations","userChange","cUserChange","cLocation","availability","handleChange","updatedState","console","log","handleSubmit","preventDefault","updateUser","toast","success","getUser","alert","localStorage","setItem","JSON","stringify","getLocations","res","newArray","locationName","maxWidth","Title","Subtitle","form","type","onInput","size","disabled","Button","variant","position","PPVolunteer","radios","cRadios","ButtonGroup","vertical","radio","index","ToggleButton","checked","newState","prev","checkHandler","ChangePassword","password1","document","getElementById","password2","reset","placeholder","VolunteerProfile","fluid","UserProfile","CgaCalendar","currentCgaLocation","sessionLocations","forEach","findVolunteerName","findVolunteerEmail","getSessions","CgaNotifications","volunteers","cVolunteers","CgaLocation","arr","changer","newUsersCard","userNum","counter","userNew","buildRows","current","removeNotification","Table","responsive","stateArray","filter","getUserByRole","classname","CgaDashboard","CreateSession","cDisabled","input","cInput","sessionVolunteers","volunteerArray","getItemValue","q","options","selectedIndex","submitHandler","addSession","inputDate","inputLocation","inputStartTime","inputFinishTime","inputAdditionalDetails","onSubmit","defaultValue","availableVolunteerFilter","autoComplete","VolunteerAvailability","readOnly","colSpan","CgaCreateSessionMain","ViewUsers","cCurrentCgaLocation","usersVolunteers","array","detailsString","singleRow","getAdminById","getUserByLocation","UserCalendar","addUser","addSessionUser","updated","body","removeSessionUser","bookingHandler","ses","cancelBookingHandler","showBookingButton","LandingPage","Image","process","Autocomplete","suggestions","setInput","newClassName","filteredSuggestions","setFilteredSuggestions","activeSuggestionIndex","setActiveSuggestionIndex","showSuggestions","setShowSuggestions","innerText","SuggestionsListComponent","suggestion","userInput","unLinked","toLowerCase","indexOf","onKeyDown","keyCode","AdminCalendar","cCurrentUser","autoCompleteInput","cAutoCompleteInput","autoCompleteInputBooking","cAutoCompleteInputBooking","autoCompleteInputCancel","cAutoCompleteInputCancel","userList","userArray","userSubmitHandler","split","showAll","adminUserBooking","sessionNotBookedUsers","adminUserBookingHandler","for","userId","sessionBookedUsers","finalArray","allUsers","bookedUsers","x","adminUserCancelBooking","adminUserCancelHandler","showBookingInput","renderFilters","UserRegister","adDetail","resetInput","UserLoginPage","userlogin","loggedIn","setUser","VolunteerLoginPage","AdminLoginPage","adminlogin","admin","CreateAccount","cUser","submitted","cSubmitted","NewArea","activeManager","allCGAs","admins","showSuccess","addLocation","manager","updateCgaLocation","CreateNewCGA","addCga","inputUsername","inputPassword","inputEmail","inputPhone","inputNamefirst","inputNamelast","cNewCga","newCga","Managerpage","cAdmins","getAdmins","CreateNewArea","ManagerCalendar","App","getItem","changeToken","parse","u","removeItem","login","t","path","ManagerPage","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.48d5053a.chunk.js","sourcesContent":["import axios from \"axios\"\r\nconst url = \"https://golf-dka.herokuapp.com/\"\r\n\r\nexport class ApiClient {\r\n\r\n    constructor(token, logout, removeUser) {\r\n        this.token = token\r\n        this.logout = logout\r\n        this.removeUser = removeUser\r\n    }\r\n\r\n    apiCall(method, url, data) {\r\n        return axios({\r\n            method,\r\n            url,\r\n            data,\r\n        }).catch((error) => {\r\n            if (error.response.status === 403) {\r\n                return Promise.reject()\r\n            } else {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n\r\n    getSessions() {\r\n        return this.apiCall(\"get\", url + 'sessions')\r\n    }\r\n\r\n    getSessionByLocation(location) {\r\n        return this.apiCall(\"get\", `${url}sessionlocation/${location}`)\r\n    }\r\n\r\n    getUsersByLocation(location) {\r\n        return this.apiCall(\"get\", `${url}userlocation/${location}`)\r\n    }\r\n\r\n    getUsers() {\r\n        return this.apiCall(\"get\", url + 'user')\r\n    }\r\n\r\n    getUser(id) {\r\n        return this.apiCall(\"get\", url + `userid/${id}`)\r\n    }\r\n\r\n    addUser(data) {\r\n        return this.apiCall(\"post\", url + 'user', data)\r\n    }\r\n\r\n    updateUser(id, dataObj) {\r\n        return this.apiCall(\"put\", url + `user/${id}`, dataObj)\r\n    }\r\n\r\n    updateCgaLocation(id, loc) {\r\n        return this.apiCall(\"put\", url + `admin/${id}`, {location: loc})\r\n    }\r\n\r\n    updateUserProfile(id, username, firstname, lastname, location, emaildata, phonedata) {\r\n        return this.apiCall(\"put\", url + `user/${id}`, {\r\n            userName: username, nameFirst: firstname, nameLast: lastname,\r\n            location: location, email: emaildata, phone: phonedata\r\n        })\r\n    }\r\n\r\n    removeSession(id) {\r\n        return this.apiCall('delete', `${url}session/${id}`)\r\n    }\r\n\r\n    addSessionUser(id, sessionUser) {\r\n        return this.apiCall('put', `${url}sessionUser/${id}`, { user: sessionUser })\r\n    }\r\n\r\n    removeSessionUser(id, sessionUser) {\r\n        return this.apiCall('put', `${url}sessionDelUser/${id}`, { user: sessionUser })\r\n    }\r\n\r\n    getLocations() {\r\n        return this.apiCall(\"get\", url + 'location')\r\n    }\r\n\r\n    getUserByRole(role) {\r\n        return this.apiCall(\"get\", `${url}userrole/${role}`)\r\n    }\r\n\r\n    addSession(date, volunteer, sessionLocation, sessionTimeStart, sessionTimeFinish, userLimit, details) {\r\n        return this.apiCall(\"post\", url + 'session', {\r\n            date: date, volunteer: volunteer, sessionUsers: [], sessionLocation: sessionLocation,\r\n            sessionTimeStart: sessionTimeStart, sessionTimeFinish: sessionTimeFinish, userLimit: userLimit, details: details\r\n        })\r\n    }\r\n\r\n    getLocationByCGA(activeCGA) {\r\n        return this.apiCall('get', `${url}locationcga/${activeCGA}`)\r\n    }\r\n\r\n    getUserByLocation(location) {\r\n        return this.apiCall('get', `${url}userlocation/${location}`)\r\n    }\r\n\r\n    getAdminById(id) {\r\n        return this.apiCall('get', `${url}adminid/${id}`)\r\n    }\r\n\r\n    getAdminByLocation(location) {\r\n        return this.apiCall('get', `${url}adminlocation/${location}`)\r\n\r\n    }\r\n\r\n    getAdmins() {\r\n        return this.apiCall('get', url + 'admin')\r\n    }\r\n\r\n    addLocation(data) {\r\n        return this.apiCall('post', url + 'location', data)\r\n    }\r\n\r\n    addCga(username, password, locationdata, emaildata, phonedata, namef, namel) {\r\n        return this.apiCall('post', url + 'admin', { userName: username, password: password, location: locationdata, \r\n            role: \"CGA\", email: emaildata, phone: phonedata, nameFirst: namef, nameLast: namel })\r\n    }\r\n\r\n    getCgaByLocation(location) {\r\n        return this.apiCall('get', `${url}cgalocation/${location}`)\r\n    }\r\n\r\n    async userlogin(user, pass) {\r\n        return await axios({\r\n          method: 'POST',\r\n          url: `${url}userauth`,\r\n          data: {\r\n            userName: user,\r\n            password: pass,\r\n          }\r\n        })\r\n    }\r\n\r\n    async adminlogin(user, pass) {\r\n        return await axios({\r\n          method: 'POST',\r\n          url: `${url}adminauth`,\r\n          data: {\r\n            userName: user,\r\n            password: pass,\r\n          }\r\n        })\r\n    }\r\n}","import React from \"react\"\r\nimport \"./Footer.css\"\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <div className=\"footer\">\r\n            <Row>\r\n                <Col lg = {1} className = 'text-black custom-nav-item nav-link contact-margin'><p>CONTACT US:</p></Col>\r\n                <Col lg = {2} className = 'center-footer text-black custom-nav-item nav-link'><p>golfinsociety@gmail.com</p></Col>\r\n                <Col lg = {1} className = 'margin-footer text-black custom-nav-item nav-link'><p >07491694938</p></Col>\r\n                <Col lg = {2} className = 'text-black custom-nav-item nav-link'><p>Mon-Fri 8am - 6pm</p></Col>\r\n                {props.currentUser ? null :  <Col className='custom-nav-item nav-link admin-login-container'><a href=\"#/login/admin\" className = 'admin-login' >Admin Log In</a></Col>}\r\n                        \r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","const sessionDate = (session) => {\r\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n    const sessionDate = new Date(session.date)\r\n    const nameDay = days[sessionDate.getDay()]\r\n    const month = months[sessionDate.getMonth()]\r\n    const date = sessionDate.getDate()\r\n    return nameDay + ', ' + month + ' ' + date\r\n}\r\n\r\nexport default sessionDate","const sessionInfo = () => {\r\n    return ([\r\n        {name: 'One-to-One Coaching',\r\n        description:'These person-centred sessions are delivered by one of our trained team at a local golf club. The service provides an enjoyable & rewarding day for the golfer PLUS a deserved respite break for carers. No golfing experience is necessary.',\r\n        cost: '£20 per hour'\r\n        },\r\n        {name: 'The Perfect Three Ball',\r\n        description:'Two golfers enjoying golf & companionship with a member of our team at a local golf club. This service provides an enjoyable & rewarding day out, the chance to make new friends and a well deserved respite break for carers. No golfing experience is necessary.',\r\n        cost: '£15 per hour'\r\n        },\r\n        {name: 'Group Session',\r\n        description:'At present we’re limited to the “rule of six”. The sessions are perfect for people who enjoy socialising, being part of a team and group coaching.',\r\n        cost: '£10 per hour'\r\n        },\r\n        {name: 'No session info to show',\r\n        description:'No session with such user limit',\r\n        cost: 'No session info to show'\r\n        }\r\n    ])\r\n}\r\n\r\nexport default sessionInfo\r\n  ","export default __webpack_public_path__ + \"static/media/logo.a2536534.png\";","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { useHistory } from \"react-router-dom\"\r\nimport Container from 'react-bootstrap/Container'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport './NavBar.css'\r\nimport navImg from \"./images/logo.png\"\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction NavBar(props) {\r\n  let history = useHistory()\r\n\r\n  function logout() {\r\n    props.client.logout()\r\n    props.client.removeUser()\r\n    history.push('/home')\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <Navbar>\r\n        <Container className=\"navbarContentContainer\">\r\n          <Navbar.Brand href=\"/\">\r\n            <img src = {navImg} alt = 'Golf in Society logo'></img>\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"justify-content-end me-auto\" activeKey=\"/home\" style={{ width: \"100%\" }}>\r\n              {/* <Nav.Item >\r\n                {props.links[0] ?\r\n                <div className='custom-nav-item nav-link'>Log in as:</div>\r\n                : null      \r\n                }\r\n              </Nav.Item> */}\r\n              {props.links.slice(0).map((v, i) => {\r\n                return (\r\n                  <Link key={i} className='custom-nav-item nav-link' to={v.url}>\r\n                    {v.name}\r\n                  </Link>\r\n                )\r\n              })}\r\n              { !props.landing ?\r\n              <Nav.Item >\r\n                {/* <div className = 'logout-btn-parent'> */}\r\n                <div className='custom-nav-item nav-link logout-text' onClick = {() => logout()}>Log out</div>\r\n                {/* </div> */}\r\n              </Nav.Item>\r\n              : ' '\r\n              }\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar >\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport * as dateFns from 'date-fns'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Popover from 'react-bootstrap/Popover'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport sessionDate from './../../CalendarComponents/sessionDate'\r\nimport sessionInfo from './../../CalendarComponents/sessionInfo'\r\nimport NavBar from '../../NavBar'\r\n\r\nfunction VolunteerCalendar(props) {\r\n  const [currentMonth, cCurrentMonth] = useState(new Date())\r\n  const [sessions, cSessions] = useState([])\r\n  const [users, cUsers] = useState([])\r\n  const [sort, cSort] = useState('showAll')\r\n  const [currentCga, cCurrentCga] = useState('')\r\n  const currentVolunteer = props.currentUser._id\r\n  const currentLocation = props.currentUser.location\r\n  const currentDate = new Date()\r\n  const links = [\r\n    false,\r\n    { name: \"Calendar\", url: \"/volunteer/calendar\" },\r\n    { name: \"Profile\", url: \"/volunteer/profile\" }\r\n  ]\r\n\r\n  // gets all the sessions and users from the database\r\n\r\n  const refreshList = () => {\r\n    props.client.getSessionByLocation(currentLocation).then((response) => cSessions(response.data))\r\n    props.client.getUsers().then((response) => cUsers(response.data)) \r\n    props.client.getCgaByLocation(currentLocation).then((response) => cCurrentCga(response.data)) \r\n  }\r\n \r\n  // renders calendar header\r\n\r\n  const renderHeader = () => {\r\n    const dateFormat = 'MMMM yyyy';\r\n    return (\r\n      <div className = 'header row flex-middle'>\r\n        <div className = 'col col-start'>\r\n          <div className = 'icon' onClick = {() => prevMonth()}>\r\n            chevron_left\r\n          </div>\r\n        </div>\r\n        <div className = 'col col-center'>\r\n          <span>{dateFns.format(currentMonth, dateFormat)}</span>\r\n        </div>\r\n        <div className = 'col col-end' onClick = {() => nextMonth()}>\r\n          <div className = 'icon'>chevron_right</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // renders calendar key and filters\r\n\r\n  const renderFilters = () => {\r\n    return (\r\n      <Row className = 'filters'>\r\n      <Col className = 'bullet-list'>\r\n        <ul className = 'filter-list-bullet'>\r\n          <li className = 'bullet-green'><span className = 'bullet-text'>Sessions you are assigned to</span></li>\r\n          <li className = 'bullet-green bullet-blue'><span className = 'bullet-text'> Sessions you are not assigned to</span></li>\r\n        </ul>\r\n      </Col>\r\n      <Col lg = {5} md = {4} className = 'dropdown-name volunteer-filter'>Filter calendar by your assigned sessions:</Col>\r\n      <Col lg = {2} md = {3} className = 'user-filter-dropdown'> \r\n        <select className = 'dropdown-list' onChange = {(e) => cSort(e.target.value)} value = {sort}>\r\n          <option value = {'showAll'}>Show All</option>\r\n          <option value = {'assigned'}>Assigned sessions</option>\r\n        </select> \r\n      </Col>\r\n    </Row>\r\n    )\r\n  }\r\n\r\n  // displays names of days in calendar\r\n\r\n  const buildDayName = (day, i) => {\r\n    return (\r\n      <div className='col col-center' key={i}>\r\n        {day}\r\n      </div>)\r\n  }\r\n\r\n  // renders calendar days\r\n\r\n  const renderDays = () => {\r\n    const shortDays = ['M', 'T', 'W', 'T', 'F', 'S', 'S']\r\n    const longDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n    let days\r\n    if (window.innerWidth < 768) {\r\n      days = shortDays.map((day, i) => buildDayName(day, i))\r\n    } else {\r\n      days =  longDays.map((day, i) => buildDayName(day, i))\r\n    }\r\n    return <div className='days row'>{days}</div>\r\n  }\r\n\r\n  // renders calendar cells\r\n\r\n  const renderCells = () => {\r\n    const monthStart = dateFns.startOfMonth(currentMonth)\r\n    const monthEnd = dateFns.endOfMonth(monthStart)\r\n    const startDate = dateFns.startOfWeek(monthStart, { weekStartsOn: 1 })\r\n    const endDate = dateFns.endOfWeek(monthEnd)\r\n    const dateFormat = 'd'\r\n    const rows = []\r\n    let days = []\r\n    let day = startDate\r\n    let formattedDate = ''\r\n\r\n    while (day <= endDate) {\r\n      for (let i = 0; i < 7; i++) {\r\n        formattedDate = dateFns.format(day, dateFormat);\r\n        days.push(\r\n          <div\r\n            className={`col cell ${\r\n              !dateFns.isSameMonth(day, monthStart)\r\n                ? 'disabled'\r\n                : dateFns.isSameDay(day, currentDate) ? 'selected' : ''\r\n            }`}\r\n            key={day} \r\n          >\r\n            <span className='number'>{formattedDate}</span>\r\n            <span><ul className = 'ul-show-sessions'>{showSessions(day)}</ul></span>\r\n          </div>\r\n        );\r\n        day = dateFns.addDays(day, 1); \r\n      }\r\n      rows.push(\r\n        <div className='row' key={day}>\r\n          {days}\r\n        </div>\r\n      )\r\n      days = [];\r\n    }\r\n    return <div className='body'>{rows}</div>\r\n  }\r\n\r\n  // shows sessions in the calendar cell for that specific day\r\n\r\n  const showSessions = (day) => {\r\n    let sessionsArray = []\r\n    let finalSessionsArray = []\r\n    const dateFormat = 'yyyy-MM-dd'\r\n    const formattedDay = dateFns.format(day, dateFormat)\r\n\r\n    let sessionsToDisplay =  sessions.map((session, i) => {\r\n      if (session.date === formattedDay) {\r\n          return displaySessions(session, i)\r\n      } \r\n    })\r\n\r\n    for (let i = 0; i < sessionsToDisplay.length; i++) {\r\n      if (sessionsToDisplay[i] !== undefined) {\r\n        sessionsArray.push(sessionsToDisplay[i])\r\n      }\r\n    }\r\n\r\n    let sortedArray = sessionsArray.sort((a, b) => a[1] - b[1])\r\n    for (let i = 0; i < sortedArray.length; i++) {\r\n      finalSessionsArray.push(sortedArray[i][0])\r\n    }\r\n    return finalSessionsArray\r\n  }\r\n  // session HTML to display in calendar cell\r\n\r\n  const sessionEntry = (session, i) => {\r\n    return (\r\n      <OverlayTrigger key = {i} trigger = 'click' placement = 'bottom' overlay = {popoverClick(session)} rootClose>\r\n        <li className = 'dis-session-info li-show-sessions' \r\n        style = {{ backgroundColor : session.volunteer === currentVolunteer ? '#5Cb85C' : '#0D6EFD', color : 'White'}}>\r\n          {session.sessionTimeStart}{' '}{displaySessionDescription(session.userLimit).name}\r\n        </li>\r\n      </OverlayTrigger>\r\n    )\r\n  }\r\n\r\n  // displays the session based on filter\r\n\r\n  const displaySessions = (session, i) => {\r\n    const sessionDateTime = new Date(session.date + ' ' + session.sessionTimeStart)\r\n    if (sort === 'assigned' && session.volunteer === currentVolunteer){\r\n      return [sessionEntry(session,i), sessionDateTime] \r\n    } else if (sort === 'showAll') {\r\n      return [sessionEntry(session,i), sessionDateTime]\r\n    }\r\n  }\r\n\r\n  // switches calendar to next month\r\n\r\n  const nextMonth = () => {\r\n    cCurrentMonth(dateFns.addMonths(currentMonth, 1))\r\n  };\r\n\r\n  // switches calendar to previous month\r\n\r\n  const prevMonth = () => {\r\n    cCurrentMonth(dateFns.subMonths(currentMonth, 1))\r\n  };\r\n\r\n  // displays correct session details based on the user limit\r\n\r\n  const displaySessionDescription = (limit) => {\r\n    switch(limit) {\r\n      case 1:\r\n        return sessionInfo()[0] \r\n      case 2:\r\n        return sessionInfo()[1]\r\n      case 5:\r\n        return sessionInfo()[2]\r\n      default:\r\n        return sessionInfo()[3]\r\n    }\r\n  }\r\n\r\n  const displayMemberNames = (session) => {\r\n    let members = []\r\n    users.map((user) => {\r\n      if (session.sessionUsers.includes(user._id)) {\r\n        members.push(user.nameFirst + ' ' + user.nameLast + ' ')\r\n      }\r\n    })\r\n    return members.join(', ')\r\n  }\r\n\r\n  // session calendar popover\r\n\r\n  const popoverClick = (session) => (\r\n    <Popover className = 'popover-main' id='popover-trigger-click' title='Popover bottom'>\r\n      <Card className = 'popover-card'>\r\n        <Card.Body className = 'popover-body'>\r\n          <Row className = 'session-name'>\r\n            {displaySessionDescription(session.userLimit).name}\r\n          </Row>\r\n          <Row>\r\n            {sessionDate(session)}{' '}{session.sessionTimeStart}{'-'}{session.sessionTimeFinish}\r\n          </Row>\r\n          <Row className = 'session-location'>\r\n            <Col className = 'location-icon' xs='auto'>\r\n              <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' class='bi bi-geo-alt-fill' viewBox='0 0 16 16'>\r\n              <path d='M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z'/>\r\n              </svg>  \r\n            </Col> \r\n            <Col className = 'location-text'>{session.sessionLocation}</Col>\r\n          </Row>\r\n          <Row className = 'session-description'>\r\n            {displaySessionDescription(session.userLimit).description}\r\n          </Row>\r\n          <Row>\r\n            {displaySessionDescription(session.userLimit).cost}\r\n          </Row>\r\n          <Row className = 'members-attending'>\r\n            {'Members attending: '}{displayMemberNames(session)}\r\n          </Row>\r\n          <Row className = 'cga-contact'>\r\n            {'CGA contact: '}\r\n            <ul className = 'cga-contact-list'>\r\n              <li>{currentCga.nameFirst + ' ' + currentCga.nameLast}</li>\r\n              <li>{'Email: '}{currentCga.email}</li>\r\n              <li>{'Number: '}{currentCga.phone}</li>\r\n            </ul>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Popover>\r\n  )\r\n\r\n  useEffect(() => {\r\n    refreshList();\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n        <div className=\"navOffset\">\r\n            <NavBar links = {links} client = {props.client} />\r\n        </div>\r\n        <div className='calendar-main'>\r\n          <div className='calendar'>\r\n            {renderHeader()}\r\n            {renderFilters()}\r\n            {renderDays()}\r\n            {renderCells()}\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VolunteerCalendar","import Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport './Profile.css'\r\nimport React, { useState, useEffect } from \"react\"\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nfunction Profile(props) {\r\n\r\n    const [locations, cLocations] = useState([])\r\n    const [userChange, cUserChange] = useState(undefined)\r\n    const [location, cLocation] = useState(props.currentUser.location)\r\n    const [users, cUsers] = useState(\r\n        {\r\n            userName: \"\",\r\n            nameFirst: \"\",\r\n            nameLast: \"\",\r\n            location: \"\",\r\n            email: \"\",\r\n            phone: \"\"\r\n        }\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (!props.currentUser) {\r\n            return;\r\n        }\r\n        const { availability, details, email, location, nameFirst, nameLast, password, phone, role, token, userName } = props.currentUser\r\n        cUsers(\r\n            {\r\n                userName,\r\n                nameFirst,\r\n                nameLast,\r\n                location,\r\n                email,\r\n                phone\r\n            }\r\n        )\r\n    }, [props.currentUser]);\r\n\r\n    const showSuccess = () => {\r\n        toast.success(\"Your details have been updated\");\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        const updatedState = { ...users }\r\n        updatedState[e.target.name] = e.target.value\r\n        cUsers(updatedState)\r\n        console.log(e.target.value, e.target.name);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        props.client.updateUser(\r\n            props.currentUser._id,\r\n            {\r\n                userName: users.userName,\r\n                nameFirst: users.nameFirst,\r\n                nameLast: users.nameLast,\r\n                location: location,\r\n                email: users.email,\r\n                phone: users.phone,\r\n            }\r\n        )\r\n            .then(() => {\r\n                showSuccess()\r\n                props.client.getUser(props.currentUser._id)\r\n                .then((response) => \r\n                    cUserChange(response.data))\r\n            })\r\n            .catch(() => {\r\n                alert('an error occured, please try again')\r\n\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (userChange) {\r\n        window.localStorage.setItem('user', JSON.stringify(userChange))\r\n        }  \r\n    },[userChange])\r\n\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n        props.client.getLocations()\r\n            .then((res) => {\r\n                const newArray = res.data.map((location) => {\r\n                    return (location.locationName)\r\n                })\r\n                cLocations(newArray);\r\n            })\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"profile-container\" >\r\n            <Card id=\"myProfile\" className=\"profile-card\" style={{ maxWidth: '30rem' }}>\r\n                <Card.Body className=\"profile-card-body\">\r\n                    <Card.Title className=\"profile-card-title\">My Profile</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\"></Card.Subtitle>\r\n                    <form className=\"cardFormContainer\" >\r\n                        <div className=\"form-group row\">\r\n                            <label\r\n                                form=\"inputemail3\"\r\n                                className=\"col-sm-12 col-lg-3 col-form-label\">Username\r\n                            </label>\r\n                            <div className=\"col-sm-12 col-lg-9\">\r\n                                <input\r\n                                    type=\"username\"\r\n                                    onInput={(e) => handleChange(e)}\r\n                                    className=\"form-control\"\r\n                                    id=\"inputUsername3\"\r\n                                    name=\"userName\"\r\n                                    value={users.userName}>\r\n                                </input>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <label\r\n                                form=\"inputFirstName3\"\r\n                                className=\"col-sm-3 col-form-label\">First Name\r\n                            </label>\r\n                            <div className=\"col-sm-9\">\r\n                                <input\r\n                                    type=\"firstname\"\r\n                                    onInput={(e) => handleChange(e)}\r\n                                    className=\"form-control\"\r\n                                    id=\"inputFirstName3\"\r\n                                    name=\"nameFirst\"\r\n                                    value={users.nameFirst}></input>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <label\r\n                                form=\"inputSurname3\"\r\n                                className=\"col-sm-3 col-form-label\">Surname\r\n                            </label>\r\n                            <div className=\"col-sm-9\">\r\n                                <input\r\n                                    type=\"surname\"\r\n                                    onInput={(e) => handleChange(e)}\r\n                                    className=\"form-control\"\r\n                                    id=\"inputSurname3\"\r\n                                    name=\"nameLast\"\r\n                                    value={users.nameLast}>\r\n                                </input>\r\n                            </div>\r\n                        </div>\r\n                        <div className='form-group row'>\r\n                            <div className='col-sm-3 col-form-label'>\r\n                                <label className='input-form-label' form='inputLocation' >Location</label>\r\n                            </div>\r\n                            <div className='col-sm-9'>\r\n                                <select size='1' className='form-control' onChange={(e) => cLocation(e.target.value)} id='inputLocation' value={location} >\r\n                                    <option value='default' disabled>-- select an option --</option>\r\n                                    {locations.map((location) => (\r\n                                        <option key={location} value={location} name=\"location\">{location}</option>))}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <label\r\n                                form=\"inputEmail3\"\r\n                                className=\"col-sm-3 col-form-label\">Email\r\n                            </label>\r\n                            <div className=\"col-sm-9\">\r\n                                <input\r\n                                    type=\"email\"\r\n                                    onInput={(e) => handleChange(e)}\r\n                                    className=\"form-control\"\r\n                                    id=\"inputEmail3\"\r\n                                    name=\"email\"\r\n                                    value={users.email}>\r\n                                </input>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <label\r\n                                form=\"inputPhone3\"\r\n                                className=\"col-sm-3 col-form-label\">Phone\r\n                            </label>\r\n                            <div className=\"col-sm-9\">\r\n                                <input\r\n                                    type=\"phone\"\r\n                                    onInput={(e) => handleChange(e)}\r\n                                    className=\"form-control\"\r\n                                    id=\"inputPhone3\"\r\n                                    name=\"phone\"\r\n                                    value={users.phone}>\r\n                                </input>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"btn-container justify-content-end\">\r\n                            <Button className='button-profile' onClick={(e) => handleSubmit(e)} variant=\"light\">Update</Button>\r\n                            <ToastContainer position='bottom-center' />\r\n                        </div>\r\n                    </form >\r\n                </Card.Body>\r\n            </Card>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Profile;","import React, { useState, useEffect } from \"react\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./PPVolunteer.css\";\r\n\r\nfunction PPVolunteer(props) {\r\n  const [userChange, cUserChange] = useState(undefined)\r\n  const [radios, cRadios] = useState([\r\n    [\"Monday\", false],\r\n    [\"Tuesday\", false],\r\n    [\"Wednesday\", false],\r\n    [\"Thursday\", false],\r\n    [\"Friday\", false],\r\n    [\"Saturday\", false],\r\n    [\"Sunday\", false],\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!props.currentUser) {\r\n      return;\r\n    }\r\n    cRadios(props.currentUser[\"availability\"]);\r\n  }, [props.currentUser]);\r\n\r\n  const showSuccess = () => {\r\n    toast.success(\"Your details have been updated\");\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    console.log(\"your choices have been saved\");\r\n    showSuccess();\r\n    props.client\r\n      .updateUser(props.currentUser._id, { availability: radios })\r\n      .then((res) => {\r\n        props.client\r\n          .getUser(props.currentUser._id)\r\n          .then((response) => \r\n          cUserChange(response.data))  \r\n      })\r\n    \r\n  };\r\n\r\n  const checkHandler = (e) => {\r\n    const newState = radios.map((prev) => {\r\n      if (e.target.value === prev[0]) {\r\n        prev[1] = !prev[1];\r\n      }\r\n      return prev;\r\n    });\r\n    cRadios(newState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userChange) {\r\n      window.localStorage.setItem('user', JSON.stringify(userChange))\r\n    }  \r\n  },[userChange])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"volunteer-container\">\r\n        <Card id=\"myDays\" className=\"volunteer-card\">\r\n          <Card.Body className=\"volunteer-card-body\">\r\n            <Card.Title className=\"volunteer-card-title\">\r\n              My Available Days\r\n            </Card.Title>\r\n            <Card.Subtitle className=\"mb-2 text-muted\"></Card.Subtitle>\r\n            <br />\r\n            <ButtonGroup vertical className=\"d-flex flex-column\">\r\n              {radios.map((radio, index) => {\r\n                return (\r\n                  <ToggleButton\r\n                    key={index}\r\n                    className=\" d-flex justify-content-between button-profile\"\r\n                    type=\"checkbox\"\r\n                    checked={radio[1]}\r\n                    value={radio[0]}\r\n                    onChange={(e) => checkHandler(e)}\r\n                  >\r\n                    {radio[0]}\r\n                  </ToggleButton>\r\n                );\r\n              })}\r\n            </ButtonGroup>\r\n\r\n            <div className=\"btn-container justify-content-end\">\r\n              <Button\r\n                className=\"volunteer-btn button-profile\"\r\n                onClick={() => handleSubmit()}\r\n                variant=\"light\"\r\n              >\r\n                Update\r\n              </Button>\r\n\r\n              <ToastContainer position=\"bottom-center\" />\r\n            </div>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default PPVolunteer;\r\n","\r\nimport { Container } from 'react-bootstrap'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport React, { useState, useEffect } from \"react\"\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport \"../Profilepage/changePassword.css\"\r\n\r\nfunction ChangePassword(props) {\r\n\r\n    const userId = props.currentUser._id\r\n\r\n    const showSuccess = () => {\r\n        toast.success(\"Your details have been updated\");\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const password1 = document.getElementById(\"password1\").value;\r\n        const password2 = document.getElementById(\"password2\").value;\r\n        console.log(password1);\r\n        console.log(password2);\r\n\r\n        if (password2 === password1) {\r\n            props.client.updateUser(\r\n                props.currentUser._id,\r\n                {\r\n                    password: password2,\r\n                }  \r\n            )\r\n                .then(() => {\r\n                    showSuccess()\r\n                    document.getElementById('change-password').reset()\r\n\r\n                })\r\n                .catch(() => {\r\n                    alert('an error occured, please try again')\r\n\r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"profile-container\" >\r\n            <Card id=\"ChangePassword\" className=\"profile-card\" style={{ maxWidth: '50rem' }}>\r\n                <Card.Body className=\"profile-card-body\">\r\n                    <Card.Title className=\"profile-card-title\">Change password</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\"></Card.Subtitle>\r\n                    <form id=\"change-password\">\r\n                        <div className=\"form-group row changePassword\">\r\n                            <label form=\"inputUsername3\" className=\"col-sm-4 col-form-label\">New Password</label>\r\n                            <div className=\"col-lg-8\">\r\n                                <input type=\"password\" className=\"form-control\" name=\"password1\" id=\"password1\" placeholder=\"New Password\"></input>\r\n                            </div><br />\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <label form=\"inputFirstName3\" className=\"col-sm-4 col-form-label\">Confirm New Password</label>\r\n                            <div className=\"col-lg-8\">\r\n                                <input type=\"password\" className=\"form-control\" name=\"password2\" id=\"password2\" placeholder=\"Confirm Password\"></input>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"btn-container justify-content-end\">\r\n                            <Button onClick={(e) => handleSubmit(e)} variant=\"light\">Update</Button>\r\n                            <ToastContainer position='bottom-center' />\r\n                        </div>\r\n                    </form >\r\n                </Card.Body>\r\n            </Card>\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\nexport default ChangePassword","import Profile from \"./Profile\"\r\nimport PPVolunteer from \"./PPVolunteer\"\r\nimport \"./VolunteerProfile.css\"\r\nimport \"./Profile.css\"\r\nimport NavBar from \"../NavBar\"\r\nimport ChangePassword from \"./ChangePassword\"\r\nimport React, { useEffect } from 'react'\r\nimport { Container } from 'react-bootstrap'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nfunction VolunteerProfile(props) {\r\n  const links = [\r\n    false,\r\n    { name: \"Calendar\", url: \"/volunteer/calendar\" },\r\n    { name: \"Profile\", url: \"/volunteer/profile\" }\r\n  ]\r\n\r\n  return (\r\n    <div className=\"row volunteerDashboardRow\">\r\n      <div className=\"navOffset\">\r\n        <NavBar links={links} client={props.client} />\r\n      </div>\r\n      <Container fluid>\r\n        <Row >\r\n          <Col lg={8} className='volunteerDashboardCol'>\r\n            <Profile client={props.client} currentUser = {props.currentUser}/>\r\n          </Col>\r\n          <Col lg={4} className='volunteerDashboardCol'>\r\n            <PPVolunteer client={props.client} currentUser = {props.currentUser}/>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col >\r\n            <ChangePassword client={props.client} currentUser={props.currentUser} />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default VolunteerProfile\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport Profile from \"./../../Profilepage/Profile\"\r\nimport NavBar from '../../NavBar'\r\nimport ChangePassword from \"./../../Profilepage/ChangePassword\"\r\n\r\n\r\nfunction UserProfile(props) {\r\n  const links = [\r\n    false,\r\n    { name: \"Calendar\", url: \"/customer/calendar\" },\r\n    { name: \"Profile\", url: \"/customer/profile\" }\r\n  ]\r\n  \r\n  return (\r\n    <div>\r\n      <div className=\"navOffset\">\r\n        <NavBar links={links} client={props.client} />\r\n      </div>\r\n      <div><Profile client={props.client} currentUser={props.currentUser} /></div>\r\n      <div><ChangePassword client={props.client} currentUser={props.currentUser} /></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserProfile","import React, { useState, useEffect } from 'react'\r\nimport * as dateFns from 'date-fns'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Popover from 'react-bootstrap/Popover'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport sessionDate from \"./../../CalendarComponents/sessionDate\"\r\nimport sessionInfo from \"./../../CalendarComponents/sessionInfo\"\r\n\r\nfunction CgaCalendar(props) {\r\n  const currentCgaLocation = props.currentUser.location\r\n  const [currentMonth, cCurrentMonth] = useState(new Date())\r\n  const [location, cLocation] = useState(currentCgaLocation)\r\n  const [locations, cLocations] = useState([])\r\n  const [sessions, cSessions] = useState([])\r\n  const [users, cUsers] = useState([])\r\n  const currentDate = new Date()\r\n \r\n  // gets all the sessions, users and locations from the database\r\n\r\n  const refreshList = () => {\r\n    props.client.getSessions().then((response) => cSessions(response.data))\r\n    props.client.getUsers().then((response) => cUsers(response.data))\r\n    props.client.getLocations().then((response) => cLocations(response.data))\r\n  }\r\n\r\n  // gets all unique session locations\r\n\r\n  const sessionLocations = () => {\r\n    let loc = []\r\n    locations.forEach((location) => {\r\n      if (!loc.includes(location.locationName)) {\r\n        loc.push(location.locationName)\r\n      }\r\n    })\r\n    return loc\r\n  }\r\n\r\n  // renders calendar header\r\n\r\n  const renderHeader = () => {\r\n    const dateFormat = 'MMMM yyyy'\r\n    return (\r\n      <div className = 'header row flex-middle'>\r\n        <div className = 'col col-start'>\r\n          <div className = 'icon' onClick = {() => prevMonth()}>\r\n            chevron_left\r\n          </div>\r\n        </div>\r\n        <div className = 'col col-center'>\r\n          <span>{dateFns.format(currentMonth, dateFormat)}</span>\r\n        </div>\r\n        <div className = 'col col-end' onClick = {() => nextMonth()}>\r\n          <div className = 'icon'>chevron_right</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // renders calendar key and filters\r\n\r\n  const renderFilters = () => {\r\n    return (\r\n        <Row className = 'filters'>\r\n          <Col className = 'bullet-list'>\r\n            <ul className = 'filter-list-bullet'>\r\n              <li className = 'bullet-green bullet-blue'><span className = 'bullet-text'> Available to book</span></li>\r\n              <li className = 'bullet-green bullet-gray'><span className = 'bullet-text'> Fully booked</span></li>\r\n            </ul>\r\n          </Col>\r\n          <Col lg = {3} md = {4} className = 'dropdown-name cga-filter text-lg-end'>Filter calendar by location:</Col>\r\n          <Col lg = {2} md = {3} className = 'user-filter-dropdown text-lg-end'>\r\n            <select className = 'dropdown-list' onChange = {(e) => cLocation(e.target.value)} value = {location}>\r\n                  <option value = {'showAll'}>Show All</option>\r\n                  {sessionLocations().map((location) => (\r\n                  <option value = {location}>{location}</option>))}\r\n              </select>\r\n          </Col>          \r\n        </Row>\r\n    )\r\n  }\r\n\r\n   // displays names of days in calendar\r\n\r\n   const buildDayName = (day, i) => {\r\n    return (\r\n      <div className='col col-center' key={i}>\r\n        {day}\r\n      </div>)\r\n  }\r\n\r\n  // renders calendar days (mobile-responsive)\r\n\r\n  const renderDays = () => {\r\n    const shortDays = ['M', 'T', 'W', 'T', 'F', 'S', 'S']\r\n    const longDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n    let days\r\n    if (window.innerWidth < 768) {\r\n      days = shortDays.map((day, i) => buildDayName(day, i))\r\n    } else {\r\n      days =  longDays.map((day, i) => buildDayName(day, i))\r\n    }\r\n    return <div className='days row'>{days}</div>\r\n  }\r\n\r\n  // renders calendar cells\r\n\r\n  const renderCells = () => {\r\n    const monthStart = dateFns.startOfMonth(currentMonth)\r\n    const monthEnd = dateFns.endOfMonth(monthStart)\r\n    const startDate = dateFns.startOfWeek(monthStart, { weekStartsOn: 1 })\r\n    const endDate = dateFns.endOfWeek(monthEnd)\r\n    const dateFormat = 'd'\r\n    const rows = []\r\n    let days = []\r\n    let day = startDate\r\n    let formattedDate = ''\r\n   \r\n    while (day <= endDate) {\r\n      for (let i = 0; i < 7; i++) {\r\n        formattedDate = dateFns.format(day, dateFormat);\r\n        days.push(\r\n          <div\r\n            className={`col cell ${\r\n              !dateFns.isSameMonth(day, monthStart)\r\n                ? 'disabled'\r\n                : dateFns.isSameDay(day, currentDate) ? 'selected' : ''\r\n            }`}\r\n            key={day} \r\n          >\r\n            <span className='number'>{formattedDate}</span>\r\n            <span><ul className = 'ul-show-sessions'>{showSessions(day)}</ul></span>\r\n          </div>\r\n        )\r\n        day = dateFns.addDays(day, 1); \r\n      }\r\n      rows.push(\r\n        <div className='row' key={day}>\r\n          {days}\r\n        </div>\r\n      )\r\n      days = []\r\n    }\r\n    return <div className = 'body'>{rows}</div>;\r\n  }\r\n\r\n  // shows sessions in the calendar cell for that specific day\r\n\r\n\r\n  const convertDate = () => {\r\n    // let date = Sun Nov 07 2021 00:00:00 GMT+0000 (Greenwich Mean Time)\r\n  }\r\n\r\n\r\n  const showSessions = (day) => {\r\n    let sessionsArray = []\r\n    let finalSessionsArray = []\r\n    const dateFormat = 'yyyy-MM-dd'\r\n    const formattedDay = dateFns.format(day, dateFormat)\r\n\r\n    let sessionsToDisplay =  sessions.map((session, i) => {\r\n      if (session.date === formattedDay) {\r\n          return displaySessions(session, i)\r\n      } \r\n    })\r\n    \r\n    for (let i = 0; i < sessionsToDisplay.length; i++) {\r\n      if (sessionsToDisplay[i] !== undefined) {\r\n        sessionsArray.push(sessionsToDisplay[i])\r\n      }\r\n    }\r\n\r\n    let sortedArray = sessionsArray.sort((a, b) => a[1] - b[1])\r\n    for (let i = 0; i < sortedArray.length; i++) {\r\n      finalSessionsArray.push(sortedArray[i][0])\r\n    }\r\n\r\n    return finalSessionsArray\r\n  }\r\n\r\n  // session HTML to display in calendar cell\r\n\r\n  const sessionEntry = (session, i) => {\r\n    return (\r\n      <OverlayTrigger key = {i} trigger='click' placement='bottom' overlay={popoverClick(session)} rootClose>\r\n        <li className = 'dis-session-info li-show-sessions' \r\n        style={{ backgroundColor : session.sessionUsers.length < session.userLimit ? '#0D6EFD' : '#62666b', \r\n        color : 'White'}} \r\n        >\r\n          {session.sessionTimeStart}{' '}{displaySessionDescription(session.userLimit).name}\r\n        </li>\r\n      </OverlayTrigger>\r\n    )\r\n  }\r\n\r\n  // displays the session based on filter\r\n\r\n  const displaySessions = (session, i) => { \r\n    const sessionDateTime = new Date(session.date + ' ' + session.sessionTimeStart) \r\n    if (location === session.sessionLocation ) {\r\n      return [sessionEntry(session,i), sessionDateTime] \r\n    } else if (location === 'showAll') {\r\n      return [sessionEntry(session,i), sessionDateTime] \r\n    } \r\n  }\r\n  // switches calendar to next month\r\n\r\n  const nextMonth = () => {\r\n    cCurrentMonth(dateFns.addMonths(currentMonth, 1))\r\n  }\r\n\r\n  // switches calendar to previous month\r\n\r\n  const prevMonth = () => {\r\n    cCurrentMonth(dateFns.subMonths(currentMonth, 1))\r\n  }\r\n\r\n  // displays correct session details based on the user limit\r\n\r\n  const displaySessionDescription = (limit) => {\r\n    switch(limit) {\r\n      case 1:\r\n        return sessionInfo()[0] \r\n      case 2:\r\n        return sessionInfo()[1]\r\n      case 5:\r\n        return sessionInfo()[2]\r\n      default:\r\n        return sessionInfo()[3]\r\n    }\r\n  }\r\n\r\n  const findVolunteerName = (session) => {\r\n    return users.map((volunteer) => {\r\n      if (volunteer._id === session.volunteer){\r\n        return 'Session volunteer: ' + volunteer.nameFirst + ' ' + volunteer.nameLast\r\n      }}\r\n    )\r\n  }\r\n\r\n  const findVolunteerEmail = (session) => {\r\n    return users.map((volunteer) => {\r\n      if (volunteer._id === session.volunteer){\r\n        return 'Volunteer contact: ' + volunteer.email\r\n      }}\r\n    )\r\n  }\r\n\r\n  const displayMemberNames = (session) => {\r\n    let members = []\r\n    users.map((user) => {\r\n      if (session.sessionUsers.includes(user._id)) {\r\n        members.push(user.nameFirst + ' ' + user.nameLast + ' ')\r\n      }\r\n    })\r\n    return members.join(', ')\r\n  }\r\n\r\n  // session calendar popover\r\n\r\n  const popoverClick = (session) => (\r\n    <Popover className = 'popover-main' id = 'popover-trigger-click' title = 'Popover bottom'>\r\n      <Card className = 'popover-card'>\r\n        <Card.Body className = 'popover-body'>\r\n          <Row className = 'session-name'>\r\n            {displaySessionDescription(session.userLimit).name}\r\n          </Row>\r\n          <Row>\r\n          {sessionDate(session)}{' '}{session.sessionTimeStart}{'-'}{session.sessionTimeFinish}\r\n          </Row>\r\n          <Row>\r\n            <Col className = 'location-icon' xs='auto'>\r\n              <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' class='bi bi-geo-alt-fill' viewBox='0 0 16 16'>\r\n              <path d='M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z'/>\r\n              </svg>  \r\n            </Col> \r\n            <Col className = 'location-text'>{session.sessionLocation}</Col>\r\n          </Row>\r\n          <Row className = 'session-description'>\r\n            {displaySessionDescription(session.userLimit).description}\r\n          </Row>\r\n          <Row>\r\n            {displaySessionDescription(session.userLimit).cost}\r\n          </Row>\r\n          <Row className = 'members-attending'>\r\n            {'Members attending: '}{displayMemberNames(session)}\r\n          </Row>\r\n          <Row>\r\n            {'Available places: '}{session.userLimit - session.sessionUsers.length}\r\n          </Row>\r\n          <Row className = 'session-volunteer'>\r\n            {findVolunteerName(session)}\r\n          </Row>\r\n          <Row>\r\n            {findVolunteerEmail(session)}\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Popover>\r\n  )\r\n\r\n  useEffect(() => {\r\n    refreshList();\r\n  }, [])\r\n\r\n  return (\r\n      <div className = 'calendar-main calendar-main-cga'>\r\n        <div className = 'calendar'>\r\n        {renderHeader()}\r\n        {renderFilters()}\r\n        {renderDays()}\r\n        {renderCells()}\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default CgaCalendar","import Card from 'react-bootstrap/Card'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Button from 'react-bootstrap/Button'\r\nimport React, { useState, useEffect } from 'react'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport Popover from 'react-bootstrap/Popover'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\n\r\nfunction CgaNotifications(props) {\r\n    const [volunteers, cVolunteers] = useState([])\r\n    const [users, cUsers] = useState([])\r\n    const CgaLocation = props.currentUser.location\r\n    \r\n    const refreshList = () => {\r\n        props.client.getUserByRole('volunteer').then((response) => {cVolunteers(response.data)})\r\n        props.client.getUserByRole('user').then((response) => {cUsers(response.data)})\r\n    }\r\n\r\n    // show popover with a list of new volunteers/customers\r\n\r\n    const popoverClick = (arr, changer) => (\r\n        <Popover className = 'popover-main notif-overlay' id = 'popover-trigger-click' title = 'Popover bottom'>\r\n              {newUsersCard(arr, changer)}   \r\n        </Popover>\r\n    )\r\n\r\n    // count number of new customers/volunteers\r\n\r\n    const userNum = (arr) => {\r\n        let counter = 0\r\n        arr.map((user) => {\r\n            if (user.userNew === true && user.location === CgaLocation) {\r\n                counter += 1\r\n            }\r\n        })\r\n        return counter\r\n    }\r\n\r\n    // build a row for each new customer/volunteer\r\n\r\n    <volunteer></volunteer>\r\n    const buildRows = (arr, changer) => {\r\n        return arr.map((current) => {\r\n            if (current.userNew === true && current.location === CgaLocation) {\r\n            return  <tr key={current._id} className = 'notif-user-row'>\r\n                        <td>{current.nameFirst + ' ' + current.nameLast}</td>\r\n                        <td>{current.email}</td>\r\n                        <td>{current.phone}</td>\r\n                        <td className = 'td-center'><button className = 'button-28' onClick = {() => removeNotification(current, changer, arr)}><svg xmlns = 'http://www.w3.org/2000/svg' width = '16' height = '16' fill = 'currentColor' class = 'bi bi-trash' viewBox = '0 0 16 16'>\r\n                        <path d = 'M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z'/>\r\n                        <path fill-rule = 'evenodd' d = 'M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z'/>\r\n                        </svg>\r\n                        </button></td>\r\n                    </tr> \r\n            }              \r\n        })\r\n    }\r\n\r\n    // build notification card popup to view a list of new volunteers/customers\r\n\r\n    const newUsersCard = (arr, changer) => {\r\n        return (\r\n            <Card id = 'myProfile' className = 'profile-card cga-session-card new-users' >\r\n                <Card.Body className = 'profile-card-body'>\r\n                <Card.Title className = 'profile-card-title'>{arr === users ? 'New customers' : 'New volunteers'}</Card.Title>\r\n                <Table responsive className = 'notification-table'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Email</th>\r\n                            <th>Phone</th>\r\n                            <th>Remove</th>\r\n                        </tr> \r\n                    </thead>\r\n                    <tbody>{buildRows(arr, changer)}</tbody>\r\n                </Table>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n        )\r\n    }\r\n\r\n    // build main page notification card\r\n\r\n    const notificationCard = () => {\r\n        return (\r\n            <Card id = 'myProfile' className = 'profile-card cga-session-card' >\r\n                <Card.Body className = 'profile-card-body'>\r\n                <Card.Title className = 'profile-card-title'>Notifications</Card.Title>\r\n                    <Table responsive className = 'notification-table'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>New customers</th>\r\n                                <th>{userNum(users)}</th>\r\n                                <th>\r\n                                    <OverlayTrigger classname = 'notif-overlay' trigger = 'click' placement = 'right' overlay = {popoverClick(users, cUsers)} rootClose>\r\n                                        <Button className = 'th-btn button-profile' disabled = {userNum(users) === 0 ? true : false}>View</Button>\r\n                                    </OverlayTrigger>\r\n                                </th>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>New volunteers</th>\r\n                                <th>{userNum(volunteers)}</th>\r\n                                <th>\r\n                                    <OverlayTrigger classname = 'notif-overlay' trigger = 'click' placement = 'right' overlay = {popoverClick(volunteers, cVolunteers)} rootClose>\r\n                                        <Button className = 'th-btn button-profile' disabled = {userNum(volunteers) === 0 ? true : false}>View</Button>\r\n                                    </OverlayTrigger>\r\n                                </th>\r\n                            </tr>   \r\n                        </thead>\r\n                    </Table>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n        )\r\n    }\r\n\r\n    // remove notification from popup\r\n\r\n    const removeNotification = (current, changer, stateArray) => {\r\n        props.client.updateUser(current._id, {userNew: false})\r\n        const newState = stateArray.filter((i) => {\r\n            if(current._id === i._id){\r\n                return false\r\n            }\r\n            return true\r\n        } )\r\n        changer(newState)\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshList();\r\n    }, [])\r\n \r\n    return (\r\n        <Row className = 'notification-card'>\r\n            <Col>{notificationCard()}</Col>\r\n        </Row>\r\n  \r\n    )\r\n}\r\n\r\nexport default CgaNotifications","import CgaCalendar from \"./CgaCalendar\"\r\nimport CgaNotifications from \"./CgaNotifications\"\r\nimport  \"./../../CalendarComponents/Calendar.css\"\r\nimport NavBar from \"./../../NavBar\"\r\n\r\nfunction CgaDashboard(props) {\r\n\r\n  const links = [\r\n    false,\r\n    { name: \"Dashboard\", url: \"/cga/dashboard\" },\r\n    { name: \"Create Session\", url: \"/cga/create-session\" },\r\n    { name: \"View Users\", url: \"/cga/view-users\" }\r\n  ]\r\n  \r\n  return (\r\n    <div>\r\n      <div className=\"navOffset\">\r\n        <NavBar links = {links} client = {props.client} />\r\n      </div>\r\n        <CgaNotifications client={props.client} currentUser = {props.currentUser}/>\r\n        <CgaCalendar client={props.client} currentUser = {props.currentUser} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CgaDashboard","import Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nfunction CreateSession(props) {\r\n    const [volunteers, cVolunteers] = useState([])\r\n    const location = props.currentUser.location\r\n    const [disabled, cDisabled] = useState(false)\r\n    const [input, cInput] = useState()\r\n\r\n    // get data from database\r\n    const refreshList = () => {\r\n        props.client.getUserByRole('volunteer').then((response) => cVolunteers(response.data))\r\n    }\r\n\r\n    // return all registered volunteers for a location\r\n\r\n    const sessionVolunteers = () => {\r\n        let volunteerArray = []\r\n        volunteers.forEach((volunteer) => {\r\n            if (volunteer.location === location) {\r\n                volunteerArray.push(volunteer)\r\n            }\r\n        })\r\n        return volunteerArray\r\n    }\r\n\r\n    // return all volunteers that are available on the selected date \r\n\r\n    const availableVolunteerFilter = () => {\r\n        const days = [6, 0, 1, 2, 3, 4, 5]\r\n        const sessionDate = new Date(input)\r\n        const day = days[sessionDate.getDay()]\r\n        let volunteerArray = []\r\n       \r\n        if (input) {\r\n            sessionVolunteers().forEach((volunteer) => {\r\n                if (volunteer.availability[day][1] === true) {\r\n                    volunteerArray.push(volunteer)\r\n                }\r\n            })     \r\n            return volunteerArray\r\n        } else {\r\n            return sessionVolunteers()\r\n        }\r\n    }\r\n\r\n    // display message after new session submission\r\n\r\n    const showSuccess = () => {\r\n        toast.success('New session has been created')\r\n    }\r\n\r\n    // get dropdown list value\r\n\r\n    const getItemValue = (q) => {\r\n        const e = document.getElementById(q)\r\n        return e.options[e.selectedIndex].value\r\n    }\r\n\r\n    // submit new session to database\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        cDisabled(true)\r\n        if (getItemValue('inputVolunteer') !== 'default' && getItemValue('inputUserLimit') !== 'default' ) {\r\n            props.client.addSession(\r\n                e.target.inputDate.value,\r\n                getItemValue('inputVolunteer'),\r\n                e.target.inputLocation.value,\r\n                e.target.inputStartTime.value,\r\n                e.target.inputFinishTime.value,\r\n                getItemValue('inputUserLimit'),\r\n                e.target.inputAdditionalDetails.value   \r\n                )\r\n            .then(() => {\r\n            showSuccess()\r\n            cDisabled(false)\r\n            document.getElementById('sessionForm').reset()\r\n            })\r\n            .catch(() => {\r\n            alert('an error occured, please try again')\r\n            cDisabled(false)\r\n            })\r\n        } else {\r\n            alert('Please fill in volunteer and session type fields')\r\n            cDisabled(false)\r\n        }\r\n      }\r\n\r\n    useEffect(() => {\r\n    refreshList();\r\n    }, [])\r\n\r\n    return (\r\n            <Card id = 'myProfile' className = 'profile-card cga-session-card' >\r\n                <Card.Body className = 'profile-card-body'>\r\n                <Card.Title className = 'profile-card-title'>Add new session</Card.Title>\r\n                    <form className = 'cardFormContainer' id = 'sessionForm' onSubmit = {(e) => submitHandler(e)}>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputDate' >Date<span className = 'required-asterisk'>*</span></label> \r\n                            </div>\r\n                            <div className = 'col-sm-8'>                           \r\n                                <input className = 'form-control' type = 'date'  id = 'inputDate'   name = 'inputDate' \r\n                                placeholder='Date' onChange = {(e) => cInput(e.target.value)}></input> \r\n                            </div>      \r\n                        </div>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputStartTime' >Start time<span className = 'required-asterisk'>*</span></label> \r\n                            </div>\r\n                            <div className='col-sm-8'>                           \r\n                                <input className = 'form-control' type = 'time'  id = 'inputStartTime'  name = 'inputStartTime' placeholder = 'Start time'></input> \r\n                            </div>\r\n                        </div>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputFinishTime' >Finish time<span className = 'required-asterisk'>*</span></label> \r\n                            </div>\r\n                            <div className = 'col-sm-8'>                           \r\n                                <input className = 'form-control' type = 'time'  id = 'inputFinishTime' name = 'inputFinishTime' placeholder = 'Finish time'></input> \r\n                            </div>\r\n                        </div>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputLocation' >Location<span className = 'required-asterisk'>*</span></label> \r\n                            </div>\r\n                            <div className='col-sm-8'>                           \r\n                                <input className='form-control' type='text'  id='location' name='inputLocation' value = {location}></input> \r\n                            </div>\r\n                        </div>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputUserLimit'>Session type<span className = 'required-asterisk'>*</span></label> \r\n                            </div>\r\n                            <div className = 'col-sm-8'>                           \r\n                            <select className = 'form-control' id = 'inputUserLimit' defaultValue = {'default'}>\r\n                                <option value = 'default' disabled>-- select an option --</option>\r\n                                <option value = '1' >One-to-One Coaching</option>\r\n                                <option value = '2' >The Perfect Three Ball</option>\r\n                                <option value = '5' >Group Session</option>\r\n                            </select> \r\n                            </div>\r\n                        </div>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputVolunteer' >Volunteer<span className = 'required-asterisk'>*</span></label> \r\n                            </div>\r\n                            <div className = 'col-sm-8'>                           \r\n                            <select size = '1' className = 'form-control' id = 'inputVolunteer' defaultValue = {'default'} >\r\n                                <option value = 'default' disabled>-- select an option --</option>\r\n                                {availableVolunteerFilter().map((volunteer) => (\r\n                                <option key = {volunteer._id} value = {volunteer._id}>{volunteer.nameFirst + ' ' + volunteer.nameLast}</option>))}\r\n                            </select> \r\n                            </div>\r\n                        </div>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'inputAdditionalDetails' form = 'inputUserLimit'>Additional details</label> \r\n                            </div>\r\n                            <div className = 'col-sm-8'>                           \r\n                                <input className = 'form-control' type = 'text'  id = 'inputAdditionalDetails' name = 'inputAdditionalDetails' placeholder = 'Additional details' autoComplete = 'off'></input> \r\n                            </div>\r\n                        </div>\r\n                        <div className = 'btn-container justify-content-end'>\r\n                            <Button className = 'button-profile' type = 'submit' variant = 'light' disabled = {disabled}>Submit</Button>\r\n                            <ToastContainer position = 'bottom-center' />\r\n                        </div>        \r\n                    </form>\r\n                </Card.Body>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default CreateSession","import Card from 'react-bootstrap/Card'\r\nimport Table from 'react-bootstrap/Table'\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nfunction VolunteerAvailability(props) {\r\n    const [volunteers, cVolunteers] = useState([])\r\n    const location = props.currentUser.location\r\n\r\n    const refreshList = () => {\r\n        props.client.getUserByRole('volunteer').then((response) => cVolunteers(response.data))\r\n    }\r\n\r\n    // return an array of volunteers in the area\r\n\r\n    const sessionVolunteers = () => {\r\n        let volunteerArray = []\r\n        volunteers.forEach((volunteer) => {\r\n            if (volunteer.location === location) {\r\n                volunteerArray.push(volunteer)\r\n            }\r\n        })\r\n        return volunteerArray\r\n    }\r\n\r\n    // builds volunteer availability table\r\n\r\n    const buildrows = () => {\r\n        if (sessionVolunteers().length > 0) {\r\n            return sessionVolunteers().map((current) => {\r\n                return <tr key={current._id}>\r\n                <td>{current.nameFirst + ' ' + current.nameLast}</td>\r\n                <td>{current.userName}</td>\r\n                <td><input type = 'checkbox' id = 'mon' readOnly checked={current.availability[0][1]}/>&nbsp;</td>\r\n                <td><input type = 'checkbox' id = 'tue' readOnly checked={current.availability[1][1]}/>&nbsp;</td>\r\n                <td><input type = 'checkbox' id = 'wed' readOnly checked={current.availability[2][1]}/>&nbsp;</td>\r\n                <td><input type = 'checkbox' id = 'thu' readOnly checked={current.availability[3][1]}/>&nbsp;</td>\r\n                <td><input type = 'checkbox' id = 'fri' readOnly checked={current.availability[4][1]}/>&nbsp;</td>\r\n                <td><input type = 'checkbox' id = 'sat' readOnly checked={current.availability[5][1]}/>&nbsp;</td>\r\n                <td><input type = 'checkbox' id = 'sun'readOnly checked={current.availability[6][1]} />&nbsp;</td>\r\n                </tr>\r\n            })\r\n        } else {\r\n            return (\r\n            <tr className = 'no-volunteers-to-show'>\r\n                <td colSpan = '9'>{'No volunteers to show'}</td>\r\n            </tr>\r\n            )\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshList();\r\n        }, [])\r\n   \r\n    return (\r\n        <Card id = 'myProfile' className = 'profile-card volunteer-availability-card' >\r\n            <Card.Body className = 'profile-card-body'>\r\n            <Card.Title className = 'profile-card-title'>Volunteer Availability</Card.Title>\r\n                <Table responsive className = 'event-table'>\r\n                <thead>\r\n                    <tr>\r\n                    <th>Name</th>\r\n                    <th>Username</th>\r\n                    <th>Mon</th>\r\n                    <th>Tue</th>\r\n                    <th>Wed</th>\r\n                    <th>Thu</th>\r\n                    <th>Fri</th>\r\n                    <th>Sat</th>\r\n                    <th>Sun</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>{buildrows()}</tbody>\r\n                </Table>    \r\n            </Card.Body>\r\n        </Card>  \r\n    )\r\n}\r\n\r\nexport default VolunteerAvailability","import Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\nimport CreateSession from \"./CgaCreateSession\"\r\nimport VolunteerAvailability from \"./CgaVolunteerAvailability\"\r\nimport './Cga.css'\r\nimport NavBar from \"./../../NavBar\"\r\n\r\nfunction CgaCreateSessionMain(props) {\r\n  const links = [\r\n    false,\r\n    { name: \"Dashboard\", url: \"/cga/dashboard\" },\r\n    { name: \"Create Session\", url: \"/cga/create-session\" },\r\n    { name: \"View Users\", url: \"/cga/view-users\" }\r\n  ]\r\n    return (\r\n      <div>\r\n          <div className=\"navOffset\">\r\n            <NavBar links = {links} client = {props.client} />\r\n          </div>\r\n          <Container fluid>\r\n            <Row > \r\n              <Col lg={6} className = 'create-session'>\r\n                <CreateSession client = {props.client} currentUser = {props.currentUser}/>\r\n              </Col>\r\n              <Col lg={6}>\r\n                <VolunteerAvailability client = {props.client} currentUser = {props.currentUser}/>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CgaCreateSessionMain","import Card from 'react-bootstrap/Card'\r\nimport Table from 'react-bootstrap/Table'\r\nimport React, { useState, useEffect } from 'react'\r\nimport NavBar from \"./../../NavBar\"\r\n\r\nfunction ViewUsers(props) {\r\n    const [users, cUsers] = useState([])\r\n    const [currentCgaLocation, cCurrentCgaLocation] = useState([])\r\n    const [sort, cSort] = useState('all')\r\n    const links = [\r\n        false,\r\n        { name: \"Dashboard\", url: \"/cga/dashboard\" },\r\n        { name: \"Create Session\", url: \"/cga/create-session\" },\r\n        { name: \"View Users\", url: \"/cga/view-users\" }\r\n    ]\r\n    \r\n    const refreshList = () => {\r\n        props.client.getAdminById(props.currentUser._id).then((response) => cCurrentCgaLocation(response.data.location))    \r\n    }\r\n    \r\n    // return an array of users and volunteers\r\n\r\n    const usersVolunteers = () => {\r\n        let array = []\r\n        users.forEach((user) => {\r\n            if(user.role === 'volunteer' || user.role === 'user') {\r\n                array.push(user)\r\n            }\r\n        })\r\n        return array\r\n    }\r\n\r\n    // if no additional user details in database, return empty string\r\n\r\n    const detailsString = (user) => {\r\n        if(user.details === 'String') {\r\n            return ' '\r\n        } else {\r\n            return user.details\r\n        }\r\n    }\r\n\r\n    // replace user with customer\r\n\r\n    const userToCustomer = (user) => {\r\n        if(user.role === 'user') {\r\n            return 'customer'\r\n        } else {\r\n            return user.role\r\n        }\r\n    }\r\n\r\n    // filter table by user role\r\n\r\n    const dropDown = () => {\r\n        return (\r\n          <div>\r\n            <div className = 'dropdown-container cga-dropdown-container'>\r\n                <div className = 'dropdown-name'>Sort by role:</div>\r\n                    <select className = 'dropdown-list' onChange={(e) => cSort(e.target.value)} value={sort}>\r\n                        <option value = {'all'}>All</option>\r\n                        <option value = {'customers'}>Customers</option>\r\n                        <option value = {'volunteers'}>Volunteers</option>\r\n                    </select>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n\r\n    // build individual table row\r\n\r\n    const singleRow = (current) => {\r\n        return (\r\n            <tr key={current._id}>\r\n            <td>{current.nameFirst + ' ' + current.nameLast}</td>\r\n            <td>{current.userName}</td>\r\n            <td>{current.location}</td>\r\n            <td>{userToCustomer(current)}</td>\r\n            <td>{current.email}</td>\r\n            <td>{current.phone}</td>\r\n            <td>{detailsString(current)}</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    // build table depending on the applied filter\r\n\r\n    const buildrows = () => {\r\n        if (usersVolunteers().length > 0) {\r\n            if (sort === 'all') {\r\n                return usersVolunteers().map((current) => {\r\n                    return singleRow(current);\r\n                })\r\n            } else if (sort === 'customers') {\r\n                return usersVolunteers().map((current) => {\r\n                    if (current.role === 'user') {\r\n                        return singleRow(current)\r\n                    }\r\n                })\r\n            } else if (sort === 'volunteers') {\r\n                return usersVolunteers().map((current) => {\r\n                    if (current.role === 'volunteer') {\r\n                        return singleRow(current)}\r\n                })\r\n            }\r\n        } else {\r\n            return (\r\n                <tr className = 'no-users-to-show'>\r\n                    <td colSpan = '5'>{'No users to show'}</td>\r\n                </tr>\r\n            )\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshList();\r\n        }, [])\r\n\r\n    useEffect(() => {\r\n        props.client.getUserByLocation(currentCgaLocation).then((response) => cUsers(response.data))\r\n        }, [currentCgaLocation])\r\n      \r\n    return (\r\n        <div>\r\n            <div className=\"navOffset\">\r\n                <NavBar links = {links} client = {props.client} />\r\n            </div>\r\n            <Card id = 'myProfile' className = 'profile-card registered-users-table' >\r\n                <Card.Body className = 'profile-card-body'>\r\n                <Card.Title className = 'profile-card-title'>All registered users in the area</Card.Title>\r\n                {dropDown()}\r\n                    <Table responsive className = 'event-table'>\r\n                    <thead>\r\n                        <tr>\r\n                        <th>Name</th>\r\n                        <th>Username</th>\r\n                        <th>Location</th>\r\n                        <th>Role</th>\r\n                        <th>Email</th>\r\n                        <th>Phone</th>\r\n                        <th>Additional information</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>{buildrows()}</tbody>\r\n                    </Table>    \r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewUsers","import React, { useState, useEffect } from 'react'\r\nimport * as dateFns from 'date-fns'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Popover from 'react-bootstrap/Popover'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport sessionInfo from \"./../../CalendarComponents/sessionInfo\"\r\nimport sessionDate from \"./../../CalendarComponents/sessionDate\"\r\nimport NavBar from '../../NavBar'\r\n\r\nfunction UserCalendar(props) {\r\n  const [currentMonth, cCurrentMonth] = useState(new Date())\r\n  const [sort, cSort] = useState('showAll')\r\n  const [sessions, cSessions] = useState([])\r\n  const [users, cUsers] = useState([])\r\n  const currentUser = props.currentUser._id\r\n  const currentLocation = props.currentUser.location\r\n  const currentDate = new Date()\r\n  const links = [\r\n    false,\r\n    { name: \"Calendar\", url: \"/customer/calendar\" },\r\n    { name: \"Profile\", url: \"/customer/profile\" }\r\n  ]\r\n \r\n  // gets all the sessions and users from the database\r\n\r\n  const refreshList = () => {\r\n    props.client.getSessionByLocation(currentLocation).then((response) => cSessions(response.data))\r\n    props.client.getUsers().then((response) => cUsers(response.data))\r\n  }\r\n\r\n  // adds user to session users (booking)\r\n\r\n  const addUser = async (id, user) => {\r\n    const res = await props.client.addSessionUser(id, user)\r\n    const updated = sessions.map((session) => {\r\n      if(session._id === id){\r\n        session.sessionUsers = res.data.body.sessionUsers\r\n      }\r\n      return session\r\n    })\r\n    cSessions(updated)\r\n  }\r\n  \r\n  // removes user from session users (booking cancellation)\r\n\r\n  const removeUser = async (id, user) => {\r\n    const res = await props.client.removeSessionUser(id, user)\r\n    const updated = sessions.map((session) => {\r\n      if(session._id === id){\r\n        session.sessionUsers = res.data.body.sessionUsers\r\n      }\r\n      return session\r\n    })\r\n    cSessions(updated)\r\n  }\r\n\r\n  // renders calendar header\r\n\r\n  const renderHeader = () => {\r\n    const dateFormat = 'MMMM yyyy'\r\n    return (\r\n      <div className = 'header row flex-middle'>\r\n        <div className = 'col col-start'>\r\n          <div className = 'icon' onClick = {() => prevMonth()}>\r\n            chevron_left\r\n          </div>\r\n        </div>\r\n        <div className = 'col col-center'>\r\n          <span>{dateFns.format(currentMonth, dateFormat)}</span>\r\n        </div>\r\n        <div className = 'col col-end' onClick = {() => nextMonth()}>\r\n          <div className = 'icon'>chevron_right</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // renders calendar key and filters\r\n\r\n  const renderFilters = () => {\r\n    return (\r\n      <Row className = 'filters'>\r\n        <Col className = 'bullet-list'>\r\n          <ul className = 'filter-list-bullet'>\r\n            <li className = 'bullet-green'><span className = 'bullet-text'>Booked sessions</span></li>\r\n            <li className = 'bullet-green bullet-blue'><span className = 'bullet-text'> Sessions available to book</span></li>\r\n          </ul>\r\n        </Col>\r\n        <Col lg = {5} md = {4} className = 'dropdown-name user-filter'>Filter calendar by your booked sessions or sessions still available to book:</Col>\r\n        <Col lg = {2} md = {3} className = 'user-filter-dropdown'> \r\n          <select className = 'dropdown-list' onChange={(e) => cSort(e.target.value)} value={sort}>\r\n            <option className = 'dropdown-option' value={'showAll'}>Show All</option>\r\n            <option className = 'dropdown-option' value={'booked'}>Booked Sessions</option>\r\n            <option className = 'dropdown-option' value={'available'}>Available Sessions</option>\r\n          </select> \r\n        </Col>\r\n      </Row>\r\n    )\r\n  }\r\n\r\n  // displays names of days in calendar\r\n\r\n  const buildDayName = (day, i) => {\r\n    return (\r\n      <div className='col col-center' key={i}>\r\n        {day}\r\n      </div>)\r\n  }\r\n\r\n  // renders calendar days\r\n\r\n  const renderDays = () => {\r\n    const shortDays = ['M', 'T', 'W', 'T', 'F', 'S', 'S']\r\n    const longDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n    let days\r\n    if (window.innerWidth < 768) {\r\n      days = shortDays.map((day, i) => buildDayName(day, i))\r\n    } else {\r\n      days =  longDays.map((day, i) => buildDayName(day, i))\r\n    }\r\n    return <div className='days row'>{days}</div>\r\n  }\r\n\r\n  // renders calendar cells\r\n  const renderCells = () => {\r\n    const monthStart = dateFns.startOfMonth(currentMonth)\r\n    const monthEnd = dateFns.endOfMonth(monthStart)\r\n    const startDate = dateFns.startOfWeek(monthStart, { weekStartsOn: 1 })\r\n    const endDate = dateFns.endOfWeek(monthEnd)\r\n    const dateFormat = 'd'\r\n    const rows = []\r\n    let days = []\r\n    let day = startDate\r\n    let formattedDate = ''\r\n\r\n    while (day <= endDate) {\r\n      for (let i = 0; i < 7; i++) {\r\n        formattedDate = dateFns.format(day, dateFormat)\r\n        days.push(\r\n          <div \r\n            className={`col cell ${\r\n              !dateFns.isSameMonth(day, monthStart)\r\n                ? 'disabled'\r\n                : dateFns.isSameDay(day, currentDate) ? 'selected' : ''\r\n            }`}\r\n            key={day} \r\n          >\r\n            <span className='number'>{formattedDate}</span>\r\n            <span><ul className = 'ul-show-sessions'>{showSessions(day)}</ul></span>\r\n          </div>\r\n        )\r\n        day = dateFns.addDays(day, 1); \r\n      }\r\n      rows.push(\r\n        <div className='row' key={day}>\r\n          {days}\r\n        </div>\r\n      ) \r\n      days = []\r\n    }\r\n    return <div className='body'>{rows}</div>\r\n  }\r\n\r\n  // shows sessions in the calendar cell for that specific day\r\n\r\n  const showSessions = (day) => {\r\n    let sessionsArray = []\r\n    let finalSessionsArray = []\r\n    const dateFormat = 'yyyy-MM-dd'\r\n    const formattedDay = dateFns.format(day, dateFormat)\r\n\r\n    let sessionsToDisplay =  sessions.map((session, i) => {\r\n      if (session.date === formattedDay) {\r\n          return displaySessions(session, i)\r\n      } \r\n    })\r\n\r\n    for (let i = 0; i < sessionsToDisplay.length; i++) {\r\n      if (sessionsToDisplay[i] !== undefined) {\r\n        sessionsArray.push(sessionsToDisplay[i])\r\n      }\r\n    }\r\n\r\n    let sortedArray = sessionsArray.sort((a, b) => a[1] - b[1])\r\n    for (let i = 0; i < sortedArray.length; i++) {\r\n      finalSessionsArray.push(sortedArray[i][0])\r\n    }\r\n    return finalSessionsArray\r\n  }\r\n\r\n  // session HTML to display in calendar cell\r\n\r\n  const sessionEntry = (session, i) => {\r\n    return (\r\n      <OverlayTrigger key = {i} trigger = 'click' placement = 'bottom' overlay = {popoverClick(session)} rootClose>\r\n        <li className = 'dis-session-info li-show-sessions' \r\n        style={{ backgroundColor : session.sessionUsers.includes(currentUser) ? '#5Cb85C': session.sessionUsers.length === session.userLimit ? 'White' : '#0D6EFD', \r\n        color : session.sessionUsers.includes(currentUser) ? 'White' : session.sessionUsers.length === session.userLimit ? 'rgb(170, 163, 163)' : 'White'}} \r\n        >\r\n          {session.sessionTimeStart}{' '}{displaySessionDescription(session.userLimit).name}\r\n        </li>\r\n      </OverlayTrigger>\r\n    )\r\n  }\r\n\r\n  // displays the session based on filter, user's booking and session user limit\r\n\r\n  const displaySessions = (session, i) => {\r\n    const sessionDateTime = new Date(session.date + ' ' + session.sessionTimeStart)\r\n    if (sort === 'booked' && session.sessionUsers.includes(currentUser)) {\r\n      return [sessionEntry(session,i), sessionDateTime]\r\n    } else if (sort === 'available' && !session.sessionUsers.includes(currentUser) && session.sessionUsers.length < session.userLimit) {\r\n      return [sessionEntry(session,i), sessionDateTime]\r\n    } else if (sort === 'showAll') {\r\n      return [sessionEntry(session,i), sessionDateTime]\r\n    }\r\n  }\r\n\r\n  // switches calendar to next month\r\n\r\n  const nextMonth = () => {\r\n    cCurrentMonth(dateFns.addMonths(currentMonth, 1))\r\n  };\r\n\r\n  // switches calendar to previous month\r\n\r\n  const prevMonth = () => {\r\n    cCurrentMonth(dateFns.subMonths(currentMonth, 1))\r\n  };\r\n\r\n  // displays correct session details based on the user limit\r\n\r\n  const displaySessionDescription = (limit) => {\r\n    switch(limit) {\r\n      case 1:\r\n        return sessionInfo()[0] \r\n      case 2:\r\n        return sessionInfo()[1]\r\n      case 5:\r\n        return sessionInfo()[2]\r\n      default:\r\n        return sessionInfo()[3]\r\n    }\r\n  }\r\n\r\n  // books user into a session\r\n\r\n  const bookingHandler = async (e, ses) => {\r\n    e.preventDefault()\r\n    sessions.forEach(async (session) => {\r\n      if (session._id === ses._id) {\r\n        addUser(ses._id, currentUser)\r\n      }\r\n    })\r\n  }\r\n\r\n  // cancels booking for the user\r\n  \r\n  const cancelBookingHandler = async (e, ses) => {\r\n    e.preventDefault()\r\n    sessions.forEach(async (session) => {\r\n      if (session._id === ses._id) {\r\n        removeUser(ses._id, currentUser)\r\n      }\r\n    })\r\n  }\r\n\r\n  // displays either book session, cancel booking or fully booked button depending on the user\r\n\r\n  const showBookingButton = (session) => {\r\n    if (session.sessionUsers.includes(currentUser)) {\r\n      return <Button className = 'btn-danger' onClick = {(e) => cancelBookingHandler(e, session)}>Cancel booking</Button>\r\n    } if (!session.sessionUsers.includes(currentUser) && session.sessionUsers.length === session.userLimit) {\r\n      return <Button className = 'btn-secondary'>Fully booked</Button>\r\n    } else {\r\n      return <Button className = 'btn-book-session' onClick = {(e) => bookingHandler(e, session)}>Book session</Button>\r\n    }\r\n  }\r\n\r\n  const findVolunteerName = (session) => {\r\n    return users.map((volunteer) => {\r\n      if (session.sessionUsers.includes(currentUser) && volunteer._id === session.volunteer){\r\n        return 'Session volunteer: ' + volunteer.nameFirst + ' ' + volunteer.nameLast\r\n      }}\r\n    )\r\n  }\r\n\r\n  const findVolunteerEmail = (session) => {\r\n    return users.map((volunteer) => {\r\n      if (session.sessionUsers.includes(currentUser) && volunteer._id === session.volunteer){\r\n        return 'Volunteer contact: ' + volunteer.email\r\n      }}\r\n    )\r\n  }\r\n\r\n  const popoverClick = (session) => (\r\n    <Popover className = 'popover-main' id='popover-trigger-click' title='Popover bottom'>\r\n      <Card className = 'popover-card'>\r\n        <Card.Body className = 'popover-body'>\r\n          <Row className = 'session-name'>\r\n            {displaySessionDescription(session.userLimit).name}\r\n          </Row>\r\n          <Row>\r\n            {sessionDate(session)}{' '}{session.sessionTimeStart}{'-'}{session.sessionTimeFinish}\r\n          </Row>\r\n          <Row>\r\n            <Col className = 'location-icon' xs='auto'>\r\n              <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' className='bi bi-geo-alt-fill' viewBox='0 0 16 16'>\r\n              <path d='M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z'/>\r\n              </svg>  \r\n            </Col> \r\n            <Col className = 'location-text'>{session.sessionLocation}</Col>\r\n          </Row>\r\n          <Row className = 'session-description'>\r\n            {displaySessionDescription(session.userLimit).description}\r\n          </Row>\r\n          <Row>\r\n            {displaySessionDescription(session.userLimit).cost}\r\n          </Row>\r\n          <Row className = 'session-volunteer'>\r\n            {findVolunteerName(session)}\r\n          </Row>\r\n          <Row>\r\n            {findVolunteerEmail(session)}\r\n          </Row>\r\n          <Row className = 'booking-btn-row'>\r\n            {showBookingButton(session)}\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Popover>\r\n  )\r\n\r\n  useEffect(() => {\r\n    refreshList();\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n        <div className=\"navOffset\">\r\n            <NavBar links = {links} client = {props.client} />\r\n        </div>\r\n        <div className = 'calendar'>\r\n          {renderHeader()}\r\n          {renderFilters()}\r\n          {renderDays()}\r\n          {renderCells()}\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserCalendar","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './LandingPage.css'\r\nimport Image from 'react-bootstrap/Image'\r\nimport NavBar from \"./NavBar\"\r\n\r\nfunction LandingPage(props) {\r\n    const links = [\r\n        { name: \"Home\", url: \"/home\" },\r\n        { name: \"Sign In as Customer\", url: \"/login/user\" },\r\n        { name: \"Sign In as Volunteer\", url: \"/login/volunteer\" },\r\n        { name: \"Create an account\", url: \"/register\" }   \r\n        // { name: \"Admin\", url: \"/login/admin\" },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"navOffset\">\r\n                <NavBar links={links} client={props.client} landing={true} />\r\n            </div>\r\n            <div className=\"landing-text\">\r\n                <h1><i>“Our lives begin to end when we become silent about the things that really matter in life”</i>. <b>Dr Martin Luther King.</b></h1>\r\n            </div>\r\n            <Container >\r\n                <b /><b />\r\n                <Image className=\"Landing-image\" src={process.env.PUBLIC_URL + \"/crowd-wave.jpg\"} />\r\n            </Container>\r\n            <div className=\"landing-text\">\r\n                <p><h2><b>Volunteering</b></h2>\r\n                    <h3>Volunteers who want to give something back to their local community through sport are the types of people we are interested in recruiting.\r\n                        Our “golf buddy” role means you get the chance to make a difference to people’s lives whilst enjoying a sport you love.\r\n                        For a full list of volunteer opportunities and venues, please visit our website.</h3></p><br />\r\n                <h2><b>Members</b></h2>\r\n\r\n                <p><h3>We are always looking to support more families with our golf sessions. The good news is that no previous golf experience is required to get involved.\r\n                    So, if you, or someone you know is looking for a service that supports carers and people diagnosed with dementia simultaneously, then our services could be the perfect match.</h3></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage\r\n\r\n","import { useState } from 'react'\r\n\r\nconst Autocomplete = ({ suggestions, input, setInput, newClassName, placeholder }) => {\r\n  const [filteredSuggestions, setFilteredSuggestions] = useState([])\r\n  const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0)\r\n  const [showSuggestions, setShowSuggestions] = useState(false)\r\n\r\n  const onChange = (e) => {\r\n    const userInput = e.target.value\r\n\r\n    // Filter our suggestions that don't contain the user's input\r\n    const unLinked = suggestions.filter(\r\n      (suggestion) =>\r\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n    )\r\n\r\n    setInput(e.target.value)\r\n    setFilteredSuggestions(unLinked)\r\n    setActiveSuggestionIndex(0)\r\n    setShowSuggestions(true)\r\n  }\r\n\r\n  const onClick = (e) => {\r\n    setFilteredSuggestions([])\r\n    setInput(e.target.innerText)\r\n    setActiveSuggestionIndex(0)\r\n    setShowSuggestions(false)\r\n  }\r\n\r\n  const onKeyDown = (e) => {\r\n    // User pressed the enter key\r\n    if (e.keyCode === 13) {\r\n      setInput(filteredSuggestions[activeSuggestionIndex])\r\n      setActiveSuggestionIndex(0)\r\n      setShowSuggestions(false)\r\n    }\r\n    // User pressed the up arrow\r\n    else if (e.keyCode === 38) {\r\n      if (activeSuggestionIndex === 0) {\r\n        return\r\n      }\r\n\r\n      setActiveSuggestionIndex(activeSuggestionIndex - 1)\r\n    }\r\n    // User pressed the down arrow\r\n    else if (e.keyCode === 40) {\r\n      if (activeSuggestionIndex - 1 === filteredSuggestions.length) {\r\n        return\r\n      }\r\n\r\n      setActiveSuggestionIndex(activeSuggestionIndex + 1)\r\n    }\r\n  }\r\n\r\n  const SuggestionsListComponent = () => {\r\n    return filteredSuggestions.length ? (\r\n      <ul class='suggestions'>\r\n        {filteredSuggestions.map((suggestion, index) => {\r\n          let className\r\n\r\n          // Flag the active suggestion with a class\r\n          if (index === activeSuggestionIndex) {\r\n            className = 'suggestion-active'\r\n          }\r\n\r\n          return (\r\n            <li className={className} key={suggestion} onClick={onClick}>\r\n              {suggestion}\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n    ) : (\r\n      <div class='no-suggestions'>\r\n        No member found\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className = 'suggestion-dropdown'>\r\n      <input\r\n        type='text'\r\n        onChange={onChange}\r\n        onKeyDown={onKeyDown}\r\n        value={input}\r\n        className = {newClassName}\r\n        name = 'user' \r\n        placeholder = {placeholder}\r\n        autoComplete = 'off'\r\n        id = 'userform'\r\n      />\r\n      {showSuggestions && input && <SuggestionsListComponent />}\r\n      </div>\r\n    </> \r\n  )\r\n}\r\n\r\nexport default Autocomplete\r\n","import React, { useState, useEffect } from 'react'\r\nimport * as dateFns from 'date-fns'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Popover from 'react-bootstrap/Popover'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './../../CalendarComponents/autoComplete.css'\r\nimport Autocomplete from './../../CalendarComponents/AutoComplete'\r\nimport sessionInfo from './../../CalendarComponents/sessionInfo'\r\nimport sessionDate from './../../CalendarComponents/sessionDate'\r\nimport NavBar from '../../NavBar'\r\n\r\nfunction AdminCalendar(props) {\r\n  const [currentMonth, cCurrentMonth] = useState(new Date())\r\n  const [currentUser, cCurrentUser] = useState(undefined)\r\n  const [sessions, cSessions] = useState([])\r\n  const [users, cUsers] = useState([])\r\n  const [sort, cSort] = useState('showAll')\r\n  const [autoCompleteInput, cAutoCompleteInput] = useState('')\r\n  const [autoCompleteInputBooking, cAutoCompleteInputBooking] = useState('')\r\n  const [autoCompleteInputCancel, cAutoCompleteInputCancel] = useState('')\r\n  const currentLocation = props.currentUser.location\r\n\r\n  const currentDate = new Date()\r\n  const links = [\r\n    false,\r\n    { name: 'Calendar', url: '/admin/calendar' },\r\n    { name: 'Register a customer', url: '/admin/register-customer' }\r\n  ]\r\n\r\n  // gets all the sessions and users from the database\r\n\r\n  const refreshList = () => {\r\n    props.client.getSessionByLocation(currentLocation).then((response) => cSessions(response.data))\r\n    // props.client.getUsersByLocation('Newcastle').then((response) => cSessions(response.data))\r\n    props.client.getUsers().then((response) => cUsers(response.data))\r\n  }\r\n\r\n  // make an array of all database users and their usernames\r\n\r\n  const userList = () => {\r\n    let userArray = []\r\n    users.map((user) => {\r\n      if (user.role === 'user'){\r\n      userArray.push(user.nameFirst + ' ' + user.nameLast + ' - ' + user.userName)\r\n      }\r\n    })\r\n    return userArray\r\n  }\r\n\r\n  \r\n\r\n  // adds user to session users (booking)\r\n\r\n  const addUser = async (id, user) => {\r\n    const res = await props.client.addSessionUser(id, user)\r\n    const updated = sessions.map((session) => {\r\n      if(session._id === id){\r\n        session.sessionUsers = res.data.body.sessionUsers\r\n      }\r\n      return session\r\n    })\r\n    cSessions(updated)\r\n  }\r\n  \r\n  // removes user from session users (booking cancellation)\r\n\r\n  const removeUser = async (id, user) => {\r\n    const res = await props.client.removeSessionUser(id, user)\r\n    const updated = sessions.map((session) => {\r\n      if(session._id === id){\r\n        session.sessionUsers = res.data.body.sessionUsers\r\n      }\r\n      return session\r\n    })\r\n    cSessions(updated)\r\n  }\r\n  \r\n  // renders calendar header\r\n\r\n  const renderHeader = () => {\r\n    const dateFormat = 'MMMM yyyy'\r\n    return (\r\n      <div className = 'header row flex-middle'>\r\n        <div className = 'col col-start'>\r\n          <div className = 'icon' onClick={() => prevMonth()}>\r\n            chevron_left\r\n          </div>\r\n        </div>\r\n        <div className = 'col col-center'>\r\n          <span>{dateFns.format(currentMonth, dateFormat)}</span>\r\n        </div>\r\n        <div className = 'col col-end' onClick = {() => nextMonth()}>\r\n          <div className = 'icon'>chevron_right</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // renders calendar key and filters\r\n\r\n  const renderFilters = () => {\r\n    let suggestions = userList()\r\n    return (\r\n        <Row className = 'filters'>\r\n          <Col className = 'bullet-list'>\r\n            <ul className = 'filter-list-bullet'>\r\n              <li className = 'bullet-green'><span className = 'bullet-text'>Booked sessions for the selected user</span></li>\r\n              <li className = 'bullet-green bullet-blue'><span className = 'bullet-text'> Available to book</span></li>\r\n              <li className = 'bullet-green bullet-gray'><span className = 'bullet-text'> Fully booked</span></li>\r\n            </ul>\r\n          </Col>\r\n          <Col lg = {8} md = {8}>\r\n            <Row>\r\n              <Col lg = {8} md = {6} className = 'dropdown-name text-lg-end txt-align-end' >Filter calendar by available sessions:</Col>\r\n              <Col className = 'user-filter-dropdown txt-align-end'>\r\n                <select className = 'dropdown-list ' onChange = {(e) => cSort(e.target.value)} value={sort}>\r\n                    <option className = 'dropdown-option' value = {'showAll'}>Show All</option>\r\n                    <option className = 'dropdown-option' value = {'available'}>Available Sessions</option>\r\n                </select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col lg = {5} md = {5} className = 'dropdown-name text-lg-end txt-align-end'><label for='userform'>Search sessions by user: </label></Col>\r\n              <Col className = 'txt-align-end'>\r\n              <form className = 'user-search-form' onSubmit = {(e) => userSubmitHandler(e, suggestions)} id = 'addUserSearchForm'>\r\n                 <Autocomplete newClassName = {'search-field'} placeholder = {'Search by user...'} input = {autoCompleteInput} setInput = {cAutoCompleteInput}\r\n                      suggestions = {suggestions}\r\n                  />\r\n                <Button className = 'user-submit-btn general-btn' type = 'submit'>Search</Button> \r\n                <Button className = 'show-all general-btn' onClick = {() => showAll()}>Show All</Button>\r\n              </form></Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n    )\r\n  }\r\n\r\n  // displays names of days in calendar\r\n\r\n  const buildDayName = (day, i) => {\r\n    return (\r\n      <div className='col col-center' key={i}>\r\n        {day}\r\n      </div>)\r\n  }\r\n\r\n  // renders calendar days\r\n\r\n  const renderDays = () => {\r\n    const shortDays = ['M', 'T', 'W', 'T', 'F', 'S', 'S']\r\n    const longDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n    let days\r\n    if (window.innerWidth < 768) {\r\n      days = shortDays.map((day, i) => buildDayName(day, i))\r\n    } else {\r\n      days =  longDays.map((day, i) => buildDayName(day, i))\r\n    }\r\n    return <div className='days row'>{days}</div>\r\n  }\r\n\r\n  // renders calendar cells\r\n  const renderCells = () => {\r\n    const monthStart = dateFns.startOfMonth(currentMonth)\r\n    const monthEnd = dateFns.endOfMonth(monthStart)\r\n    const startDate = dateFns.startOfWeek(monthStart, { weekStartsOn: 1 })\r\n    const endDate = dateFns.endOfWeek(monthEnd)\r\n    const dateFormat = 'd'\r\n    const rows = []\r\n    let days = []\r\n    let day = startDate\r\n    let formattedDate = ''\r\n\r\n    while (day <= endDate) {\r\n      for (let i = 0; i < 7; i++) {\r\n        formattedDate = dateFns.format(day, dateFormat);\r\n        days.push(\r\n          <div\r\n            className={`col cell ${\r\n              !dateFns.isSameMonth(day, monthStart)\r\n                ? 'disabled'\r\n                : dateFns.isSameDay(day, currentDate) ? 'selected' : ''\r\n            }`}\r\n            key={day} \r\n          >\r\n            <span className='number'>{formattedDate}</span>\r\n            <span><ul className = 'ul-show-sessions'>{showSessions(day)}</ul></span>\r\n          </div>\r\n        );\r\n        day = dateFns.addDays(day, 1); \r\n      }\r\n      rows.push(\r\n        <div className='row' key={day}>\r\n          {days}\r\n        </div>\r\n      )\r\n      days = []\r\n    }\r\n    return <div className='body'>{rows}</div>\r\n  }\r\n\r\n  // shows sessions in the calendar cell for that specific day\r\n\r\n  const showSessions = (day) => {\r\n    let sessionsArray = []\r\n    let finalSessionsArray = []\r\n    const dateFormat = 'yyyy-MM-dd'\r\n    const formattedDay = dateFns.format(day, dateFormat)\r\n\r\n    let sessionsToDisplay =  sessions.map((session, i) => {\r\n      if (session.date === formattedDay) {\r\n          return displaySessions(session, i)\r\n      } \r\n    })\r\n\r\n    for (let i = 0; i < sessionsToDisplay.length; i++) {\r\n      if (sessionsToDisplay[i] !== undefined) {\r\n        sessionsArray.push(sessionsToDisplay[i])\r\n      }\r\n    }\r\n\r\n    let sortedArray = sessionsArray.sort((a, b) => a[1] - b[1])\r\n    for (let i = 0; i < sortedArray.length; i++) {\r\n      finalSessionsArray.push(sortedArray[i][0])\r\n    }\r\n    return finalSessionsArray\r\n  }\r\n\r\n  // session HTML to display in calendar cell\r\n\r\n  const sessionEntry = (session, i) => {\r\n    return (\r\n      <OverlayTrigger key = {i} trigger='click' placement='bottom' overlay={popoverClick(session)} rootClose>\r\n        <li className = 'dis-session-info li-show-sessions' \r\n        style={{ backgroundColor : currentUser !== undefined && session.sessionUsers.includes(currentUser)? 'Green' : session.sessionUsers.length < session.userLimit ? '#0D6EFD' : '#62666b', \r\n        color : 'White'}} \r\n        >\r\n          {session.sessionTimeStart}{' '}{displaySessionDescription(session.userLimit).name}\r\n        </li>\r\n      </OverlayTrigger>\r\n    )\r\n  }\r\n\r\n  // gets information for that particular session\r\n\r\n  const displaySessions = (session, i) => {\r\n    const sessionDateTime = new Date(session.date + ' ' + session.sessionTimeStart)  \r\n    if (sort === 'available'  && session.sessionUsers.length < session.userLimit && !session.sessionUsers.includes(currentUser)) {\r\n      return [sessionEntry(session,i), sessionDateTime] \r\n    } else if (sort === 'showAll') {\r\n      return [sessionEntry(session,i), sessionDateTime]\r\n    }\r\n  }\r\n\r\n  // switches calendar to next month\r\n\r\n  const nextMonth = () => {\r\n    cCurrentMonth(dateFns.addMonths(currentMonth, 1))\r\n  }\r\n\r\n  // switches calendar to previous month\r\n\r\n  const prevMonth = () => {\r\n    cCurrentMonth(dateFns.subMonths(currentMonth, 1))\r\n  }\r\n\r\n  // displays correct session details based on the user limit\r\n\r\n  const displaySessionDescription = (limit) => {\r\n    switch(limit) {\r\n      case 1:\r\n        return sessionInfo()[0] \r\n      case 2:\r\n        return sessionInfo()[1]\r\n      case 5:\r\n        return sessionInfo()[2]\r\n      default:\r\n        return sessionInfo()[3]\r\n    }\r\n  }\r\n\r\n  // books user into a session\r\n\r\n  const bookingHandler = (e, ses) => {\r\n    e.preventDefault()\r\n    if (currentUser) {\r\n    sessions.forEach((session) => {\r\n      if (session._id === ses._id && currentUser !== undefined) {\r\n        addUser(ses._id, currentUser)\r\n      }\r\n    })\r\n  }\r\n  }\r\n\r\n  // cancels booking for the selected user\r\n\r\n  const cancelBookingHandler = (e, ses) => {\r\n    e.preventDefault()\r\n    sessions.forEach((session) => {\r\n      if (session.id === ses.id) {\r\n        removeUser(ses._id, currentUser)\r\n      }\r\n    })\r\n  }\r\n\r\n  // displays either book session, cancel booking or fully booked button depending on the user\r\n\r\n  const showBookingButton = (session) => {\r\n    if (session.sessionUsers.includes(currentUser)) {\r\n      return <Button className = 'btn-danger' onClick = {(e) => cancelBookingHandler(e, session)}>Cancel booking</Button>\r\n    } if (!session.sessionUsers.includes(currentUser) && session.sessionUsers.length === session.userLimit) {\r\n      return <Button className = 'btn-secondary'>Fully booked</Button>\r\n    } else {\r\n      return <Button className = 'btn-book-session' onClick = {(e) => bookingHandler(e, session)}>Book session</Button>\r\n    }\r\n  }\r\n\r\n  const findVolunteerName = (session) => {\r\n    return users.map((volunteer) => {\r\n      if (volunteer._id === session.volunteer){\r\n        return 'Session volunteer: ' + volunteer.nameFirst + ' ' + volunteer.nameLast\r\n      }}\r\n    )\r\n  }\r\n\r\n  const findVolunteerEmail = (session) => {\r\n    return users.map((volunteer) => {\r\n      if (volunteer._id === session.volunteer){\r\n        return 'Volunteer contact: ' + volunteer.email\r\n      }}\r\n    )\r\n  }\r\n\r\n \r\n\r\n  \r\n  // searches for all the sessions for a specified user\r\n\r\n  const userSubmitHandler = (e, suggestions) => {\r\n    e.preventDefault()\r\n    if (suggestions.includes(e.target.user.value)) {\r\n      let userName = e.target.user.value.split('- ')\r\n      users.forEach((user) => {\r\n        if(userName[1] === user.userName) {\r\n          cCurrentUser(user._id)\r\n        }\r\n      })\r\n    } else {\r\n      cCurrentUser(undefined)\r\n    }     \r\n  }\r\n\r\n  // show all sessions\r\n\r\n  const showAll = () => {\r\n    cCurrentUser(undefined)\r\n    cAutoCompleteInput('')\r\n  }\r\n\r\n  // books session for a user inside popover\r\n\r\n  const adminUserBooking = (session) => {\r\n    let suggestions = sessionNotBookedUsers(session)\r\n    return (\r\n    <form className = 'user-book-form' onSubmit = {(e) => adminUserBookingHandler(e, session, suggestions)} id = 'adminUserBookingForm'>\r\n      <label className = 'user-book-form-label' for='userform'>Book for a user: </label>\r\n      <Autocomplete newClassName = {'search-field'} placeholder = {'Search by user...'} input = {autoCompleteInputBooking} setInput = {cAutoCompleteInputBooking}\r\n                      suggestions = {suggestions}\r\n                  />\r\n      <Button className = 'btn-book-session btn-book-session-margin' type = 'submit'>Book</Button> \r\n  </form>)\r\n  }\r\n\r\n  // adds user to session users inside popover\r\n\r\n  const adminUserBookingHandler = (e, ses, suggestions) => {\r\n    e.preventDefault()\r\n    if (suggestions.includes(e.target.user.value)) {\r\n      let userName = e.target.user.value.split('- ')\r\n      let userId\r\n      users.forEach((user) => {\r\n        if(userName[1] === user.userName) {\r\n          userId = user._id\r\n        }\r\n      })\r\n      sessions.forEach((session) => {\r\n        if (session._id === ses._id) {\r\n          addUser(ses._id, userId)\r\n        }\r\n      })\r\n    } \r\n    cAutoCompleteInputBooking('')\r\n  }\r\n\r\n  // make an array of all the users booked into the session\r\n    \r\n  const sessionBookedUsers = (session) => {\r\n    let userArray = []\r\n    let finalArray = []\r\n    sessions.forEach((ses) => {\r\n      if (ses._id === session._id) {\r\n        userArray.push(ses.sessionUsers)\r\n      }\r\n    })\r\n\r\n    for (let i = 0; i < userArray[0].length; i++) {\r\n      users.forEach((user) => {\r\n        if (user._id === userArray[0][i]) {\r\n          finalArray.push(user.nameFirst + ' ' + user.nameLast + ' - ' + user.userName)\r\n        }\r\n      })\r\n    }\r\n    return finalArray\r\n  }\r\n\r\n  // make an array of all the users in the database who aren't booked into that particular session\r\n\r\n  const sessionNotBookedUsers = (session) => {\r\n    const allUsers = userList(session)\r\n    const bookedUsers = sessionBookedUsers(session)\r\n    let finalArray = allUsers.filter(x => !bookedUsers.includes(x))\r\n    return finalArray\r\n  }\r\n\r\n  // cancels session for a user inside popover\r\n\r\n  const adminUserCancelBooking = (session) => {\r\n    let suggestions = sessionBookedUsers(session)\r\n    return (\r\n      <form className = 'user-book-form' onSubmit = {(e) => adminUserCancelHandler(e, session, suggestions)} id = 'adminUserCancelForm'>\r\n        <label className = 'user-book-form-label' for='userform'>Cancel booking for a user: </label>\r\n        <Autocomplete newClassName = {'search-field'} placeholder = {'Search by user...'} input = {autoCompleteInputCancel} setInput = {cAutoCompleteInputCancel}\r\n                      suggestions = {suggestions}\r\n                  />\r\n        <Button className = 'btn-danger booking-submit' type = 'submit'>Cancel booking</Button> \r\n      </form>)\r\n  }\r\n\r\n  // cancels user session booking inside popover\r\n \r\n  const adminUserCancelHandler = (e, ses, suggestions) => {\r\n    e.preventDefault()\r\n    if (suggestions.includes(e.target.user.value)) {\r\n      let userName = e.target.user.value.split('- ')\r\n      let userId\r\n      users.forEach((user) => {\r\n        if(userName[1] === user.userName) {\r\n          userId = user._id\r\n        }\r\n      })\r\n      sessions.forEach((session) => {\r\n        if (session._id === ses._id) {\r\n          removeUser(ses._id, userId)\r\n        }\r\n      })\r\n    } \r\n    cAutoCompleteInputCancel('')\r\n  }\r\n\r\n  // displays user booking input fields inside popover\r\n\r\n  const showBookingInput = (session) => {\r\n    if (session.sessionUsers.length === session.userLimit) {\r\n      return (\r\n        <div>\r\n          <Button className = 'btn-secondary'>Fully booked</Button>\r\n          {adminUserCancelBooking(session)}\r\n        </div>\r\n      )\r\n    } else {\r\n        return (\r\n          <div>\r\n            {adminUserBooking(session)}\r\n            {adminUserCancelBooking(session)}\r\n          </div>\r\n        )\r\n    }\r\n  }\r\n\r\n  const displayMemberNames = (session) => {\r\n    let members = []\r\n    users.map((user) => {\r\n      if (session.sessionUsers.includes(user._id)) {\r\n        members.push(user.nameFirst + ' ' + user.nameLast + ' ')\r\n      }\r\n    })\r\n    return members.join(', ')\r\n  }\r\n\r\n  // session calendar popover\r\n\r\n  const popoverClick = (session) => (\r\n    <Popover className = 'popover-main' id = 'popover-trigger-click' title = 'Popover bottom'>\r\n      <Card className = 'popover-card'>\r\n        <Card.Body className = 'popover-body'>\r\n          <Row className = 'session-name'>\r\n            {displaySessionDescription(session.userLimit).name}\r\n          </Row>\r\n          <Row>\r\n          {sessionDate(session)}{' '}{session.sessionTimeStart}{'-'}{session.sessionTimeFinish}\r\n          </Row>\r\n          <Row>\r\n            <Col className = 'location-icon' xs='auto'>\r\n              <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' className='bi bi-geo-alt-fill' viewBox='0 0 16 16'>\r\n              <path d='M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z'/>\r\n              </svg>  \r\n            </Col> \r\n            <Col className = 'location-text'>{session.sessionLocation}</Col>\r\n          </Row>\r\n          <Row className = 'session-description'>\r\n            {displaySessionDescription(session.userLimit).description}\r\n          </Row>\r\n          <Row>\r\n            {displaySessionDescription(session.userLimit).cost}\r\n          </Row>\r\n          <Row>\r\n            {'Members attending: '}{displayMemberNames(session)}\r\n          </Row>\r\n          <Row>\r\n            {'Available places: '}{session.userLimit - session.sessionUsers.length}\r\n          </Row>\r\n          <Row className = 'session-volunteer'>\r\n            {findVolunteerName(session)}\r\n          </Row>\r\n          <Row>\r\n            {findVolunteerEmail(session)}\r\n          </Row>\r\n          <Row className = 'booking-btn-row '>\r\n            {currentUser ? showBookingButton(session) : ''}\r\n          </Row>\r\n          <Row className = 'admin-user-booking-buttons'>\r\n            {currentUser ? '' : showBookingInput(session)}\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Popover>\r\n  )\r\n\r\n  useEffect(() => {\r\n    refreshList();\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <div className='navOffset'>\r\n          <NavBar links = {links} client = {props.client} />\r\n      </div>\r\n      <div className='calendar'>\r\n        {renderHeader()}\r\n        {renderFilters()}\r\n        {renderDays()}\r\n        {renderCells()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminCalendar","import React, { useState } from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport NavBar from '../../NavBar'\r\n\r\nfunction UserRegister(props) {\r\n  const [disabled, cDisabled] = useState(false)\r\n  const links = [\r\n    false,\r\n    { name: \"Calendar\", url: \"/admin/calendar\" },\r\n    { name: \"Register a customer\", url: \"/admin/register-customer\" }\r\n  ]\r\n\r\n  const showSuccess = () => {\r\n    toast.success(\"New user added\")\r\n  }\r\n\r\n  const submitHandler = (e) => {\r\n      e.preventDefault(); \r\n      props.client.addUser({\r\n          userName: e.target.username.value, \r\n          password: e.target.password.value,\r\n          location: e.target.location.value,\r\n          role: 'user', \r\n          email: e.target.email.value,\r\n          phone: e.target.phone.value, \r\n          nameFirst: e.target.nameFirst.value,\r\n          nameLast: e.target.nameLast.value, \r\n          details: e.target.adDetail.value,\r\n      })\r\n      .then((response) => {\r\n        cDisabled(false)\r\n        showSuccess()\r\n        resetInput() \r\n      })\r\n      .catch(() => {\r\n        alert('please fill in all required fields')\r\n        cDisabled(false)\r\n        resetInput()\r\n      })\r\n    }\r\n\r\n  const resetInput = () => {\r\n    document.getElementById('addLogin').reset()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <div className=\"navOffset\">\r\n            <NavBar links = {links} client = {props.client}/>\r\n        </div>\r\n        <div>\r\n          <div className = 'd-flex justify-content-center'>\r\n            <Card id = 'myProfile' className = 'profile-card cga-session-card' style = {{maxWidth: '30rem'}}>\r\n              <Card.Body className = 'profile-card-body'>\r\n              <Card.Title className = 'profile-card-title'>Register a new customer</Card.Title>\r\n                <form onSubmit={(e) => submitHandler(e)} id = 'addLogin'>\r\n                <br />\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'username' >Username<span className = 'required-asterisk'>*</span></label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'text' \r\n                            name = 'username' \r\n                            placeholder = 'Username' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'password' >Password<span className = 'required-asterisk'>*</span></label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'password' \r\n                            name = 'password' \r\n                            placeholder = 'Password' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'location' >Location<span className = 'required-asterisk'>*</span></label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'text' \r\n                            name = 'location' \r\n                            placeholder = 'Location' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'email' >Email<span className = 'required-asterisk'>*</span></label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'text' \r\n                            name = 'email' \r\n                            placeholder = 'Email' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'phone' >Phone</label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'text' \r\n                            name = 'phone' \r\n                            placeholder = 'Phone' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'nameFirst' >First name<span className = 'required-asterisk'>*</span></label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'text' \r\n                            name = 'nameFirst' \r\n                            placeholder = 'First name' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'nameLast' >Last name</label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'text' \r\n                            name = 'nameLast' \r\n                            placeholder = 'Last name' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'adDetail' >Additional details</label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'text' \r\n                            name = 'adDetail' \r\n                            placeholder = 'Additional details' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <br />\r\n                <div className = 'btn-container justify-content-center'>\r\n                  <Button className = 'button-profile' type = 'submit' disabled = {disabled}>\r\n                    {' '}\r\n                    {'Register'}{' '}\r\n                  </Button>\r\n                  <ToastContainer position = 'bottom-center' />\r\n                </div>\r\n                <br />\r\n              </form> \r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserRegister","import React, { useState } from 'react'\r\nimport { useHistory } from \"react-router-dom\"\r\nimport './App.css'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport NavBar from \"./NavBar\"\r\n\r\nfunction UserLoginPage(props) {\r\n  const [disabled, cDisabled] = useState(false)\r\n  let history = useHistory()\r\n  const links = [\r\n      { name: \"Home\", url: \"/home\" },\r\n      { name: \"Sign In as Customer\", url: \"/login/user\" },\r\n      { name: \"Sign In as Volunteer\", url: \"/login/volunteer\" },\r\n      { name: \"Create an account\", url: \"/register\" }\r\n  ] \r\n \r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    cDisabled(true)\r\n    props.client.userlogin(e.target.username.value, e.target.password.value)\r\n      .then((response) => {\r\n        cDisabled(false)\r\n        if (response.data.user.role === 'user') {\r\n          props.loggedIn(response.data.user.token)\r\n          props.setUser(response.data.user)\r\n          history.push('/customer/calendar')\r\n        } else {\r\n          alert('not a valid username or password')\r\n          cDisabled(false)\r\n          resetInput()\r\n        }\r\n      })\r\n      .catch(() => {\r\n        alert('not a valid username or password')\r\n        cDisabled(false)\r\n        resetInput()\r\n      })\r\n    }\r\n\r\n  const resetInput = () => {\r\n    document.getElementById('addLogin').reset()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <div className=\"navOffset\">\r\n            <NavBar links={links} client = {props.client} landing = {true}/>\r\n        </div>\r\n        <div>\r\n          <div className = 'd-flex justify-content-center'>\r\n            <Card id = 'myProfile' className = 'profile-card cga-session-card' style = {{maxWidth: '20rem'}}>\r\n              <Card.Body className = 'profile-card-body'>\r\n              <Card.Title className = 'profile-card-title'>Sign in as a customer</Card.Title>\r\n                <form onSubmit={(e) => submitHandler(e)} id = 'addLogin'>\r\n                  <br />\r\n                  <input \r\n                    className = 'form-control' \r\n                    type = 'text' \r\n                    name = 'username' \r\n                    placeholder = 'Username' \r\n                    disabled = {disabled} \r\n                    autoComplete = 'off'\r\n                  />\r\n                  <br />\r\n                  <input \r\n                    className = 'form-control' \r\n                    type = 'password' \r\n                    name = 'password' \r\n                    placeholder = 'Password' \r\n                    disabled = {disabled} \r\n                    autoComplete = 'off'\r\n                  />\r\n                  <br />\r\n                  <div className = 'btn-container justify-content-center'>\r\n                    <Button className = 'button-profile' type = 'submit' disabled = {disabled}>\r\n                      {' '}\r\n                      {'Sign In'}{' '}\r\n                    </Button>\r\n                  </div>\r\n                  <br />\r\n                </form> \r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserLoginPage","import React, { useState } from 'react'\r\nimport { useHistory } from \"react-router-dom\"\r\nimport './App.css'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport NavBar from \"./NavBar\"\r\n\r\nfunction VolunteerLoginPage(props) {\r\n  const [disabled, cDisabled] = useState(false)\r\n  let history = useHistory()\r\n  const links = [\r\n      { name: \"Home\", url: \"/home\" },\r\n      { name: \"Sign In as Customer\", url: \"/login/user\" },\r\n      { name: \"Sign In as Volunteer\", url: \"/login/volunteer\" },\r\n      { name: \"Create an account\", url: \"/register\" }\r\n  ] \r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    cDisabled(true)\r\n    props.client.userlogin(e.target.username.value, e.target.password.value)\r\n      .then((response) => {\r\n        if (response.data.user.role === 'volunteer') {\r\n          props.loggedIn(response.data.user.token)\r\n          props.setUser(response.data.user)\r\n          history.push('/volunteer/calendar')\r\n        } else {\r\n          alert('not a valid username or password')\r\n          cDisabled(false)\r\n          resetInput()\r\n        }\r\n      })\r\n      .catch(() => {\r\n        alert('not a valid username or password')\r\n        cDisabled(false)\r\n        resetInput()\r\n      })\r\n    }\r\n\r\n  const resetInput = () => {\r\n    document.getElementById('addLogin').reset()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <div className=\"navOffset\">\r\n            <NavBar links = {links} client = {props.client} landing = {true} />\r\n        </div>\r\n        <div>\r\n          <div className = 'd-flex justify-content-center'>\r\n            <Card id = 'myProfile' className = 'profile-card cga-session-card' style = {{maxWidth: '20rem'}}>\r\n              <Card.Body className = 'profile-card-body'>\r\n              <Card.Title className = 'profile-card-title'>Sign in as a volunteer</Card.Title>\r\n                <form onSubmit={(e) => submitHandler(e)} id = 'addLogin'>\r\n                  <br />\r\n                  <input \r\n                    className = 'form-control' \r\n                    type = 'text' \r\n                    name = 'username' \r\n                    placeholder = 'Username' \r\n                    disabled = {disabled} \r\n                    autoComplete = 'off'\r\n                  />\r\n                  <br />\r\n                  <input \r\n                    className = 'form-control' \r\n                    type = 'password' \r\n                    name = 'password' \r\n                    placeholder = 'Password' \r\n                    disabled = {disabled} \r\n                    autoComplete = 'off'\r\n                  />\r\n                  <br />\r\n                  <div className = 'btn-container justify-content-center'>\r\n                    <Button className = 'button-profile' type = 'submit' disabled = {disabled}>\r\n                      {' '}\r\n                      {'Sign In'}{' '}\r\n                    </Button>\r\n                  </div>\r\n                  <br />\r\n                </form> \r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VolunteerLoginPage","import React, { useState } from 'react'\r\nimport { useHistory } from \"react-router-dom\"\r\nimport './App.css'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport NavBar from \"./NavBar\"\r\n\r\nfunction AdminLoginPage(props) {\r\n  const [disabled, cDisabled] = useState(false)\r\n  let history = useHistory()\r\n  const links = [\r\n    { name: \"Home\", url: \"/home\" },\r\n    { name: \"Sign In as Customer\", url: \"/login/user\" },\r\n    { name: \"Sign In as Volunteer\", url: \"/login/volunteer\" },\r\n    { name: \"Create an account\", url: \"/register\" }\r\n  ] \r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    cDisabled(true)\r\n    props.client.adminlogin(e.target.username.value, e.target.password.value)\r\n      .then((response) => {\r\n        if (response.data.admin.role === 'CGA') {\r\n          props.loggedIn(response.data.admin.token)\r\n          props.setUser(response.data.admin)\r\n          history.push('/cga/dashboard')\r\n        } else if (response.data.admin.role === 'admin') {\r\n          props.loggedIn(response.data.admin.token)\r\n          props.setUser(response.data.admin)\r\n          history.push('/admin/calendar')\r\n        } else if (response.data.admin.role === 'manager') {\r\n          props.loggedIn(response.data.admin.token)\r\n          props.setUser(response.data.admin)\r\n          history.push('/manager/calendar')\r\n        } else {\r\n          alert('not a valid username or password')\r\n          cDisabled(false)\r\n          resetInput()\r\n        }\r\n      })\r\n      .catch(() => {\r\n        alert('not a valid username or password')\r\n        cDisabled(false)\r\n        resetInput()\r\n      })\r\n    }\r\n  \r\n  const resetInput = () => {\r\n    document.getElementById('addLogin').reset()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <div className=\"navOffset\">\r\n            <NavBar links = {links} client = {props.client} landing = {true} />\r\n        </div>\r\n        <div>\r\n          <div className = 'd-flex justify-content-center'>\r\n            <Card id = 'myProfile' className = 'profile-card cga-session-card' style = {{maxWidth: '20rem'}}>\r\n              <Card.Body className = 'profile-card-body'>\r\n              <Card.Title className = 'profile-card-title'>Admin Log In</Card.Title>\r\n                <form onSubmit={(e) => submitHandler(e)} id = 'addLogin'>\r\n                  <br />\r\n                  <input \r\n                    className = 'form-control' \r\n                    type = 'text' \r\n                    name = 'username' \r\n                    placeholder = 'Username' \r\n                    disabled = {disabled} \r\n                    autoComplete = 'off'\r\n                  />\r\n                  <br />\r\n                  <input \r\n                    className = 'form-control' \r\n                    type = 'password' \r\n                    name = 'password' \r\n                    placeholder = 'Password' \r\n                    disabled = {disabled} \r\n                    autoComplete = 'off'\r\n                  />\r\n                  <br />\r\n                  <div className = 'btn-container justify-content-center'>\r\n                    <Button className = 'button-profile' type = 'submit' disabled = {disabled}>\r\n                      {' '}\r\n                      {'Sign In'}{' '}\r\n                    </Button>\r\n                  </div>\r\n                  <br />\r\n              </form> \r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AdminLoginPage","import React, { useState, useEffect } from 'react'\r\nimport './App.css'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport NavBar from \"./NavBar\"\r\n\r\nfunction CreateAccount(props) {\r\n  const [disabled, cDisabled] = useState(false)\r\n  const [user, cUser] = useState('')\r\n  const [location, cLocation] = useState('')\r\n  const [locations, cLocations] = useState([])\r\n  const [submitted, cSubmitted] = useState(false)\r\n\r\n  const links = [\r\n        { name: \"Home\", url: \"/home\" },\r\n        { name: \"Sign In as Customer\", url: \"/login/user\" },\r\n        { name: \"Sign In as Volunteer\", url: \"/login/volunteer\" },\r\n        { name: \"Create an account\", url: \"/register\" }\r\n  ] \r\n\r\n  useEffect(() => {\r\n    props.client.getLocations().then((res) => {const newArray = res.data.map((location) => {\r\n        return (location.locationName)\r\n    })\r\n    cLocations(newArray)})\r\n  }, []);\r\n \r\n  const submitHandler = (e) => {\r\n      e.preventDefault(); \r\n      props.client.addUser({\r\n          userName: e.target.username.value, \r\n          password: e.target.password.value,\r\n          location: location,\r\n          role: user, \r\n          email: e.target.email.value,\r\n          phone: e.target.phone.value, \r\n          nameFirst: e.target.nameFirst.value,\r\n          nameLast: e.target.nameLast.value, \r\n          details: e.target.adDetail.value,\r\n      })\r\n      .then(() => {\r\n        cDisabled(false)\r\n        resetInput()\r\n        cSubmitted(true)  \r\n      })\r\n      .catch((res) => {\r\n        alert('an error occurred, please try again')\r\n        cDisabled(false)\r\n        resetInput()\r\n      })\r\n    }\r\n\r\n  const resetInput = () => {\r\n    document.getElementById('addRegister').reset()\r\n  }\r\n\r\n  const showLogIn = () => {\r\n    if (user === 'volunteer') {\r\n      return <div className = 'account-sign-up'>New account successfully created! <br/> Log in <a href=\"#/login/volunteer\" className = 'purple-text' onClick = {() => {cSubmitted(false)}}>here</a></div>\r\n    } else {\r\n      return <div className = 'account-sign-up'>New account successfully created! <br/> Log in <a href=\"#/login/user\" className = 'purple-text'onClick = {() => {cSubmitted(false)}}>here</a></div>\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <div className=\"navOffset\">\r\n            <NavBar links={links} client = {props.client} landing = {true}/>\r\n        </div>\r\n        <div>\r\n          <div className = 'd-flex justify-content-center'>\r\n            <Card id = 'myProfile' className = 'profile-card cga-session-card' style = {{maxWidth:'30rem'}}>\r\n              <Card.Body className = 'profile-card-body'>\r\n              <Card.Title className = 'profile-card-title'>{submitted ? '' : 'Create an account'}</Card.Title>\r\n                {!submitted ? \r\n                <form onSubmit={(e) => submitHandler(e)} id = 'addRegister'>\r\n                <br />\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'username' >Username<span className = 'required-asterisk'>*</span></label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'text' \r\n                            name = 'username' \r\n                            placeholder = 'Username' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'password' >Password<span className = 'required-asterisk'>*</span></label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'password' \r\n                            name = 'password' \r\n                            placeholder = 'Password' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'location' >Role<span className = 'required-asterisk'>*</span></label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <select className = 'form-control' id = 'inputLocation' onChange = {(e) => cUser(e.target.value)} defaultValue = {'default'}>\r\n                            <option value = 'default' disabled>-- select an option --</option>\r\n                            <option value = 'user'>Customer</option>\r\n                            <option value = 'volunteer'>Volunteer</option>\r\n                        </select>\r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'location' >Location<span className = 'required-asterisk'>*</span></label> \r\n                    </div>                          \r\n                    <div className='col-sm-8'>\r\n                                <select size='1' className='form-control' onChange={(e) => cLocation(e.target.value)} id='inputLocation' defaultValue={'default'} >\r\n                                    <option value='default' disabled>-- select an option --</option>\r\n                                    {locations.map((location) => (\r\n                                        <option key={location} value={location} name=\"location\">{location}</option>))}\r\n                                </select>\r\n                            </div> \r\n                    </div>      \r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'email' >Email<span className = 'required-asterisk'>*</span></label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'text' \r\n                            name = 'email' \r\n                            placeholder = 'Email' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'phone' >Phone</label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'text' \r\n                            name = 'phone' \r\n                            placeholder = 'Phone' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'nameFirst' >First name<span className = 'required-asterisk'>*</span></label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'text' \r\n                            name = 'nameFirst' \r\n                            placeholder = 'First name' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'nameLast' >Last name</label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'text' \r\n                            name = 'nameLast' \r\n                            placeholder = 'Last name' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <div className = 'form-group row'>\r\n                    <div className = 'col-form-label col-sm-4'>\r\n                        <label className = 'input-form-label' form = 'adDetail' >Additional details</label> \r\n                    </div>\r\n                    <div className = 'col-sm-8'>                           \r\n                        <input \r\n                            className = 'form-control' \r\n                            type = 'text' \r\n                            name = 'adDetail' \r\n                            placeholder = 'Additional details' \r\n                            disabled = {disabled} \r\n                            autoComplete = 'off'\r\n                        /> \r\n                    </div>      \r\n                </div>\r\n                <br />\r\n                <div className = 'btn-container justify-content-center'>\r\n                  <Button className = 'button-profile' type = 'submit' disabled = {disabled}>\r\n                    {' '}\r\n                    {'Register'}{' '}\r\n                  </Button>\r\n                </div>\r\n                <br />\r\n              </form> \r\n              : \r\n               showLogIn()\r\n              }\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateAccount","import Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport Autocomplete from './../../CalendarComponents/AutoComplete'\r\nimport './../../CalendarComponents/autoComplete.css'\r\n\r\nfunction NewArea(props) {\r\n    const [autoCompleteInputBooking, cAutoCompleteInputBooking] = useState('')\r\n    const [disabled, cDisabled] = useState(false)\r\n    const activeManager = props.currentUser._id\r\n\r\n    // get names and usernames of all the CGAs\r\n    const allCGAs = () => {\r\n        let arr = []\r\n        props.admins.map((admin) => {\r\n            if (admin.role === 'CGA') {\r\n                arr.push(admin.nameFirst + ' ' + admin.nameLast + ' - ' + admin.userName)\r\n            }\r\n        })\r\n        return arr\r\n    }\r\n\r\n    // display message after new session submission\r\n\r\n    const showSuccess = () => {\r\n        toast.success('New session has been created')\r\n    }\r\n \r\n    // submit new session to database\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        cDisabled(true)\r\n    \r\n        if (allCGAs().includes(e.target.user.value)) {\r\n            let userName = e.target.user.value.split(' - ')\r\n            let userId\r\n            props.admins.forEach((admin) => {\r\n                if(userName[1] === admin.userName) {\r\n                  userId = admin._id\r\n                }\r\n            })\r\n            props.client.addLocation({\r\n                locationName: e.target.inputLocation.value,\r\n                activeCGA:userId,\r\n                manager:activeManager\r\n            })\r\n            props.client.updateCgaLocation(userId, e.target.inputLocation.value)\r\n            .then(() => {\r\n                showSuccess()\r\n                cDisabled(false)\r\n                document.getElementById('newAreaForm').reset()\r\n                cAutoCompleteInputBooking('')\r\n            })\r\n            .catch(() => {\r\n                alert('an error occured, please try again')\r\n                cDisabled(false)\r\n            })\r\n        } else if (e.target.user.value === '') {\r\n            props.client.addLocation({\r\n                locationName:e.target.inputLocation.value,\r\n                manager:activeManager\r\n            })\r\n            .then(() => {\r\n                showSuccess()\r\n                cDisabled(false)\r\n                document.getElementById('newAreaForm').reset()\r\n                cAutoCompleteInputBooking('')\r\n            })\r\n            .catch(() => {\r\n                alert('an error occured, please try again')\r\n                cDisabled(false)\r\n            })\r\n        } else {\r\n            alert('Please select active CGA from the list or leave it empty')\r\n        }\r\n    }\r\n\r\n    return (\r\n            <Card id = 'myProfile' className = 'profile-card cga-session-card' >\r\n                <Card.Body className = 'profile-card-body'>\r\n                <Card.Title className = 'profile-card-title'>Add new area</Card.Title>\r\n                    <form className = 'cardFormContainer' id = 'newAreaForm' onSubmit = {(e) => submitHandler(e)}>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputLocation' >Location<span className = 'required-asterisk'>*</span></label> \r\n                            </div>\r\n                            <div className = 'col-sm-8'>                           \r\n                                <input className = 'form-control' type = 'text'  id = 'inputLocation'   name = 'inputLocation' \r\n                                placeholder='Location' autoComplete = 'off'></input> \r\n                            </div>      \r\n                        </div>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputCga' >Active CGA</label> \r\n                            </div>\r\n                            <div className='col-sm-8'>      \r\n                                <Autocomplete newClassName = {'form-control'}  placeholder = {'Search by CGA...'}input = {autoCompleteInputBooking} setInput = {cAutoCompleteInputBooking}\r\n                                    suggestions = {allCGAs()}\r\n                                /> \r\n                            </div>\r\n                        </div>\r\n                        <div className = 'btn-container justify-content-end'>\r\n                            <Button className = 'button-profile' type = 'submit' variant = 'light' disabled = {disabled}>Submit</Button>\r\n                            <ToastContainer position = 'bottom-center' />\r\n                        </div>        \r\n                    </form>\r\n                </Card.Body>\r\n            </Card>\r\n    )\r\n    }\r\n\r\nexport default NewArea","import Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nfunction CreateNewCGA(props) {\r\n    const [location, cLocation] = useState('none')\r\n    const [locations, cLocations] = useState([])\r\n    const [disabled, cDisabled] = useState(false)\r\n\r\n    // get data from database\r\n\r\n    const refreshList = () => {\r\n        props.client.getLocations().then((response) => cLocations(response.data))\r\n    }\r\n\r\n    // gets all unique session locations\r\n\r\n    const sessionLocations = () => {\r\n        let loc = []\r\n        locations.forEach((location) => {\r\n          if (!loc.includes(location.locationName)) {\r\n            loc.push(location.locationName)\r\n          }\r\n        })\r\n        return loc\r\n      }\r\n\r\n    // display message after new session submission\r\n\r\n    const showSuccess = () => {\r\n        toast.success('New session has been created')\r\n    }\r\n\r\n    // submit new session to database\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        cDisabled(true)\r\n        \r\n        props.client.addCga(\r\n            e.target.inputUsername.value,\r\n            e.target.inputPassword.value,\r\n            location,\r\n            e.target.inputEmail.value,\r\n            e.target.inputPhone.value,\r\n            e.target.inputNamefirst.value,\r\n            e.target.inputNamelast.value,\r\n        )\r\n        .then(() => {\r\n            showSuccess()\r\n            props.cNewCga(!props.newCga)\r\n            cDisabled(false)\r\n            document.getElementById('newCgaForm').reset()\r\n        })\r\n        .catch(() => {\r\n            alert('an error occured, please try again')\r\n            cDisabled(false)\r\n        })\r\n        }\r\n\r\n    useEffect(() => {\r\n    refreshList();\r\n    }, [])\r\n\r\n    return (\r\n            <Card id = 'myProfile' className = 'profile-card cga-session-card' >\r\n                <Card.Body className = 'profile-card-body'>\r\n                <Card.Title className = 'profile-card-title'>Add new Community Golf Activator</Card.Title>\r\n                    <form className = 'cardFormContainer' id = 'newCgaForm' onSubmit = {(e) => submitHandler(e)}>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputUsername' >Username<span className = 'required-asterisk'>*</span></label> \r\n                            </div>\r\n                            <div className = 'col-sm-8'>                           \r\n                                <input className = 'form-control' type = 'text'  id = 'inputUsername'   name = 'inputUsername' \r\n                                placeholder='Username' autoComplete = 'off'></input> \r\n                            </div>      \r\n                        </div>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputPassword' >Password<span className = 'required-asterisk'>*</span></label> \r\n                            </div>\r\n                            <div className='col-sm-8'>                           \r\n                                <input className = 'form-control' type = 'password'  id = 'inputPassword'  name = 'inputPassword' placeholder = 'Password' autoComplete = 'off'></input> \r\n                            </div>\r\n                        </div>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputLocation'>Location</label> \r\n                            </div>\r\n                            <div className='col-sm-8'>\r\n                                <select className = 'form-control' id = 'inputLocation' onChange = {(e) => cLocation(e.target.value)} defaultValue = {'default'}>\r\n                                    <option value = 'default' disabled>-- select an option --</option>\r\n                                    <option value = 'none'>None of the below</option>\r\n                                    {sessionLocations().map((location) => (\r\n                                    <option value = {location}>{location}</option>))}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputNamefirst'>First name<span className = 'required-asterisk'>*</span></label> \r\n                            </div>\r\n                            <div className = 'col-sm-8'>                           \r\n                                <input className = 'form-control' type = 'text'  id = 'inputNamefirst' name = 'inputNamefirst' placeholder = 'First name' autoComplete = 'off'></input> \r\n                            </div>\r\n                        </div>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputNamelast'>Last name</label> \r\n                            </div>\r\n                            <div className = 'col-sm-8'>                           \r\n                                <input className = 'form-control' type = 'text'  id = 'inputNamelast' name = 'inputNamelast' placeholder = 'Last name' autoComplete = 'off'></input> \r\n                            </div>\r\n                        </div>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputPhone'>Phone</label> \r\n                            </div>\r\n                            <div className = 'col-sm-8'>                           \r\n                                <input className = 'form-control' type = 'text'  id = 'inputPhone' name = 'inputPhone' placeholder = 'Phone' autoComplete = 'off'></input> \r\n                            </div>\r\n                        </div>\r\n                        <div className = 'form-group row'>\r\n                            <div className = 'col-form-label col-sm-4'>\r\n                                <label className = 'input-form-label' form = 'inputEmail'>Email<span className = 'required-asterisk'>*</span></label> \r\n                            </div>\r\n                            <div className = 'col-sm-8'>                           \r\n                                <input className = 'form-control' type = 'text'  id = 'inputEmail' name = 'inputEmail' placeholder = 'Email' autoComplete = 'off'></input> \r\n                            </div>\r\n                        </div>\r\n                        <div className = 'btn-container justify-content-end'>\r\n                            <Button className = 'button-profile' type = 'submit' variant = 'light' disabled = {disabled}>Submit</Button>\r\n                            <ToastContainer position = 'bottom-center' />\r\n                        </div>        \r\n                    </form>\r\n                </Card.Body>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default CreateNewCGA","import { useState, useEffect } from 'react'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\nimport CreateNewArea from \"./CreateNewArea\"\r\nimport CreateNewCGA from \"./CreateNewCGA\"\r\nimport NavBar from \"./../../NavBar\"\r\n\r\nfunction Managerpage(props) {\r\n  const [newCga, cNewCga] = useState(false)\r\n  const [admins, cAdmins] = useState([])\r\n  const links = [\r\n    false,\r\n    { name: \"Calendar\", url: \"/manager/calendar\" },\r\n    { name: \"Add new areas\", url: \"/manager/new-areas\" }\r\n  ]\r\n\r\n  const refreshList = () => {\r\n    props.client.getAdmins().then((response) => cAdmins(response.data))\r\n  }\r\n\r\n  useEffect(() => {\r\n    refreshList();\r\n    }, [newCga])\r\n\r\n    return (\r\n      <div>\r\n          <div className=\"navOffset\">\r\n            <NavBar links = {links} client = {props.client} />\r\n          </div>\r\n          <Container fluid>\r\n            <Row >\r\n              <Col lg={6} className = 'create-session'>\r\n                <CreateNewArea client = {props.client} currentUser = {props.currentUser} admins = {admins} />\r\n              </Col>\r\n              <Col lg={6}>\r\n                <CreateNewCGA client = {props.client} cNewCga = {cNewCga}  newCga = {newCga}/>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Managerpage","import React, { useState, useEffect } from 'react'\r\nimport * as dateFns from 'date-fns'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Popover from 'react-bootstrap/Popover'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport sessionDate from \"./../../CalendarComponents/sessionDate\"\r\nimport sessionInfo from \"./../../CalendarComponents/sessionInfo\"\r\nimport NavBar from '../../NavBar'\r\n\r\nfunction ManagerCalendar(props) {\r\n  const [currentMonth, cCurrentMonth] = useState(new Date())\r\n  const [location, cLocation] = useState('showAll')\r\n  const [locations, cLocations] = useState([])\r\n  const [sessions, cSessions] = useState([])\r\n  const [users, cUsers] = useState([])\r\n  const currentDate = new Date()\r\n  const links = [\r\n    false,\r\n    { name: \"Calendar\", url: \"/manager/calendar\" },\r\n    { name: \"Add new areas\", url: \"/manager/new-areas\" }\r\n]\r\n\r\n  // gets all the sessions, users and locations from the database\r\n\r\n  const refreshList = () => {\r\n    props.client.getSessions().then((response) => cSessions(response.data))\r\n    props.client.getUsers().then((response) => cUsers(response.data))\r\n    props.client.getLocations().then((response) => cLocations(response.data))\r\n    // props.client.getAdminById('615d7e616d365c85eff5f442').then((response) => cCurrentManagerLocation(response.data[0].location))  \r\n  }\r\n\r\n  // gets all unique session locations\r\n\r\n  const sessionLocations = () => {\r\n    let loc = []\r\n    locations.forEach((location) => {\r\n      if (!loc.includes(location.locationName)) {\r\n        loc.push(location.locationName)\r\n      }\r\n    })\r\n    return loc\r\n  }\r\n\r\n  // renders calendar header\r\n\r\n  const renderHeader = () => {\r\n    const dateFormat = 'MMMM yyyy'\r\n    return (\r\n      <div className = 'header row flex-middle'>\r\n        <div className = 'col col-start'>\r\n          <div className = 'icon' onClick = {() => prevMonth()}>\r\n            chevron_left\r\n          </div>\r\n        </div>\r\n        <div className = 'col col-center'>\r\n          <span>{dateFns.format(currentMonth, dateFormat)}</span>\r\n        </div>\r\n        <div className = 'col col-end' onClick = {() => nextMonth()}>\r\n          <div className = 'icon'>chevron_right</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // renders calendar key and filters\r\n\r\n  const renderFilters = () => {\r\n    return (\r\n        <Row className = 'filters'>\r\n          <Col className = 'bullet-list'>\r\n            <ul className = 'filter-list-bullet'>\r\n              <li className = 'bullet-green bullet-blue'><span className = 'bullet-text'> Available to book</span></li>\r\n              <li className = 'bullet-green bullet-gray'><span className = 'bullet-text'> Fully booked</span></li>\r\n            </ul>\r\n          </Col>\r\n          <Col lg = {3} md = {4} className = 'dropdown-name cga-filter text-lg-end'>Filter calendar by location:</Col>\r\n          <Col lg = {2} md = {3} className = 'user-filter-dropdown text-lg-end'>\r\n            <select className = 'dropdown-list' onChange = {(e) => cLocation(e.target.value)} value = {location}>\r\n                  <option value = {'showAll'}>Show All</option>\r\n                  {sessionLocations().map((location) => (\r\n                  <option value = {location}>{location}</option>))}\r\n              </select>\r\n          </Col>          \r\n        </Row>\r\n    )\r\n  }\r\n\r\n   // displays names of days in calendar\r\n\r\n   const buildDayName = (day, i) => {\r\n    return (\r\n      <div className='col col-center' key={i}>\r\n        {day}\r\n      </div>)\r\n  }\r\n\r\n  // renders calendar days (mobile-responsive)\r\n\r\n  const renderDays = () => {\r\n    const shortDays = ['M', 'T', 'W', 'T', 'F', 'S', 'S']\r\n    const longDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n    let days\r\n    if (window.innerWidth < 768) {\r\n      days = shortDays.map((day, i) => buildDayName(day, i))\r\n    } else {\r\n      days =  longDays.map((day, i) => buildDayName(day, i))\r\n    }\r\n    return <div className='days row'>{days}</div>\r\n  }\r\n\r\n  // renders calendar cells\r\n\r\n  const renderCells = () => {\r\n    const monthStart = dateFns.startOfMonth(currentMonth)\r\n    const monthEnd = dateFns.endOfMonth(monthStart)\r\n    const startDate = dateFns.startOfWeek(monthStart, { weekStartsOn: 1 })\r\n    const endDate = dateFns.endOfWeek(monthEnd)\r\n    const dateFormat = 'd'\r\n    const rows = []\r\n    let days = []\r\n    let day = startDate\r\n    let formattedDate = ''\r\n\r\n    while (day <= endDate) {\r\n      for (let i = 0; i < 7; i++) {\r\n        formattedDate = dateFns.format(day, dateFormat);\r\n        days.push(\r\n          <div\r\n            className={`col cell ${\r\n              !dateFns.isSameMonth(day, monthStart)\r\n                ? 'disabled'\r\n                : dateFns.isSameDay(day, currentDate) ? 'selected' : ''\r\n            }`}\r\n            key={day} \r\n          >\r\n            <span className='number'>{formattedDate}</span>\r\n            <span><ul className = 'ul-show-sessions'>{showSessions(day)}</ul></span>\r\n          </div>\r\n        )\r\n        day = dateFns.addDays(day, 1); \r\n      }\r\n      rows.push(\r\n        <div className='row' key={day}>\r\n          {days}\r\n        </div>\r\n      )\r\n      days = []\r\n    }\r\n    return <div className = 'body'>{rows}</div>;\r\n  }\r\n\r\n  // shows sessions in the calendar cell for that specific day\r\n\r\n  const showSessions = (day) => {\r\n    let sessionsArray = []\r\n    let finalSessionsArray = []\r\n    const dateFormat = 'yyyy-MM-dd'\r\n    const formattedDay = dateFns.format(day, dateFormat)\r\n\r\n    let sessionsToDisplay =  sessions.map((session, i) => {\r\n      if (session.date === formattedDay) {\r\n          return displaySessions(session, i)\r\n      } \r\n    })\r\n\r\n    for (let i = 0; i < sessionsToDisplay.length; i++) {\r\n      if (sessionsToDisplay[i] !== undefined) {\r\n        sessionsArray.push(sessionsToDisplay[i])\r\n      }\r\n    }\r\n\r\n    let sortedArray = sessionsArray.sort((a, b) => a[1] - b[1])\r\n    for (let i = 0; i < sortedArray.length; i++) {\r\n      finalSessionsArray.push(sortedArray[i][0])\r\n    }\r\n    return finalSessionsArray\r\n  }\r\n\r\n  // session HTML to display in calendar cell\r\n\r\n  const sessionEntry = (session, i) => {\r\n    return (\r\n      <OverlayTrigger key = {i} trigger='click' placement='bottom' overlay={popoverClick(session)} rootClose>\r\n        <li className = 'dis-session-info li-show-sessions' \r\n        style={{ backgroundColor : session.sessionUsers.length < session.userLimit ? '#0D6EFD' : '#62666b', \r\n        color : 'White'}} \r\n        >\r\n          {session.sessionTimeStart}{' '}{displaySessionDescription(session.userLimit).name}\r\n        </li>\r\n      </OverlayTrigger>\r\n    )\r\n  }\r\n\r\n  // displays the session based on filter\r\n\r\n  const displaySessions = (session, i) => { \r\n    const sessionDateTime = new Date(session.date + ' ' + session.sessionTimeStart) \r\n    if (location === session.sessionLocation ) {\r\n      return [sessionEntry(session,i), sessionDateTime] \r\n    } else if (location === 'showAll') {\r\n      return [sessionEntry(session,i), sessionDateTime] \r\n    } \r\n  }\r\n  // switches calendar to next month\r\n\r\n  const nextMonth = () => {\r\n    cCurrentMonth(dateFns.addMonths(currentMonth, 1))\r\n  }\r\n\r\n  // switches calendar to previous month\r\n\r\n  const prevMonth = () => {\r\n    cCurrentMonth(dateFns.subMonths(currentMonth, 1))\r\n  }\r\n\r\n  // displays correct session details based on the user limit\r\n\r\n  const displaySessionDescription = (limit) => {\r\n    switch(limit) {\r\n      case 1:\r\n        return sessionInfo()[0] \r\n      case 2:\r\n        return sessionInfo()[1]\r\n      case 5:\r\n        return sessionInfo()[2]\r\n      default:\r\n        return sessionInfo()[3]\r\n    }\r\n  }\r\n\r\n  const findVolunteerName = (session) => {\r\n    return users.map((volunteer) => {\r\n      if (volunteer._id === session.volunteer){\r\n        return 'Session volunteer: ' + volunteer.nameFirst + ' ' + volunteer.nameLast\r\n      }}\r\n    )\r\n  }\r\n\r\n  const findVolunteerEmail = (session) => {\r\n    return users.map((volunteer) => {\r\n      if (volunteer._id === session.volunteer){\r\n        return 'Volunteer contact: ' + volunteer.email\r\n      }}\r\n    )\r\n  }\r\n\r\n  const displayMemberNames = (session) => {\r\n    let members = []\r\n    users.map((user) => {\r\n      if (session.sessionUsers.includes(user._id)) {\r\n        members.push(user.nameFirst + ' ' + user.nameLast + ' ')\r\n      }\r\n    })\r\n    return members.join(', ')\r\n  }\r\n\r\n  // session calendar popover\r\n\r\n  const popoverClick = (session) => (\r\n    <Popover className = 'popover-main' id = 'popover-trigger-click' title = 'Popover bottom'>\r\n      <Card className = 'popover-card'>\r\n        <Card.Body className = 'popover-body'>\r\n          <Row className = 'session-name'>\r\n            {displaySessionDescription(session.userLimit).name}\r\n          </Row>\r\n          <Row>\r\n            {sessionDate(session)}{' '}{session.sessionTimeStart}{'-'}{session.sessionTimeFinish}\r\n          </Row>\r\n          <Row>\r\n            <Col className = 'location-icon' xs='auto'>\r\n              <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' class='bi bi-geo-alt-fill' viewBox='0 0 16 16'>\r\n              <path d='M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z'/>\r\n              </svg>  \r\n            </Col> \r\n            <Col className = 'location-text'>{session.sessionLocation}</Col>\r\n          </Row>\r\n          <Row className = 'session-description'>\r\n            {displaySessionDescription(session.userLimit).description}\r\n          </Row>\r\n          <Row>\r\n            {displaySessionDescription(session.userLimit).cost}\r\n          </Row>\r\n          <Row className = 'members-attending'>\r\n            {'Members attending: '}{displayMemberNames(session)}\r\n          </Row>\r\n          <Row>\r\n            {'Available places: '}{session.userLimit - session.sessionUsers.length}\r\n          </Row>\r\n          <Row className = 'session-volunteer'>\r\n            {findVolunteerName(session)}\r\n          </Row>\r\n          <Row>\r\n            {findVolunteerEmail(session)}\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Popover>\r\n  )\r\n\r\n  useEffect(() => {\r\n    refreshList();\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n        <div className=\"navOffset\">\r\n            <NavBar links = {links} client = {props.client} />\r\n        </div>\r\n        <div className='calendar-main'>\r\n          <div className='calendar'>\r\n            {renderHeader()}\r\n            {renderFilters()}\r\n            {renderDays()}\r\n            {renderCells()}\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ManagerCalendar","import React, { useEffect, useState } from \"react\"\r\nimport { ApiClient } from \"./apiClient\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './CalendarComponents/Calendar.css'\r\nimport './App.css'\r\nimport Footer from \"./Footer\"\r\nimport Container from 'react-bootstrap/Container'\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route\r\n} from 'react-router-dom'\r\nimport VolunteerCalendar from \"./Dashboards/VolunteerDashboard/VolunteerCalendar\"\r\nimport VolunteerProfile from \"./Profilepage/VolunteerProfile\"\r\nimport UserProfile from \"./Dashboards/UserDashboard/UserProfile\"\r\nimport CgaDashboard from \"./Dashboards/CgaDashboard/CgaDashboard\"\r\nimport CgaCreateSessionMain from \"./Dashboards/CgaDashboard/CgaCreateSessionMain\"\r\nimport ViewUsers from \"./Dashboards/CgaDashboard/CgaViewUsers\"\r\nimport UserCalendar from \"./Dashboards/UserDashboard/UserCalendar\"\r\nimport LandingPage from \"./LandingPage\"\r\nimport AdminCalendar from \"./Dashboards/AdminDashboard/AdminCalendar\"\r\nimport UserRegister from \"./Dashboards/AdminDashboard/UserRegister\"\r\nimport UserLoginPage from \"./UserLoginPage\"\r\nimport VolunteerLoginPage from \"./VolunteerLoginPage\"\r\nimport AdminLoginPage from \"./AdminLoginPage\"\r\nimport CreateAccount from \"./CreateAccount\"\r\nimport ManagerPage from \"./Dashboards/ManagerDashboard/ManagerPage\"\r\nimport ManagerCalendar from \"./Dashboards/ManagerDashboard/ManagerCalendar\"\r\n\r\nfunction App() {\r\n  const client = new ApiClient(\r\n    () => token,\r\n    () => logout(),\r\n    () => removeUser()\r\n  )\r\n\r\n  const [token, changeToken] = useState(window.localStorage.getItem('token'))\r\n  const [currentUser, cCurrentUser] = useState(JSON.parse(window.localStorage.getItem('user')))\r\n\r\n  const setUser = (u) => {\r\n    window.localStorage.setItem('user', JSON.stringify(u))\r\n    cCurrentUser(u)\r\n  }\r\n\r\n  const removeUser = () => {\r\n    window.localStorage.removeItem('user')\r\n    cCurrentUser(undefined)\r\n  }\r\n\r\n  const login = (t) => {\r\n    window.localStorage.setItem('token', t)\r\n    changeToken(t)\r\n  }\r\n\r\n  const logout = () => {\r\n    window.localStorage.removeItem('token')\r\n    changeToken(undefined)\r\n  }\r\n\r\n  useEffect(()=> {\r\n    const user = window.localStorage.getItem('user')\r\n    cCurrentUser(JSON.parse(user))\r\n  }, [])\r\n\r\n  return (\r\n \r\n    <Router>\r\n      <div className=\"App\">\r\n        <div className=\"contentContainer\">\r\n          <Container>\r\n            <Switch>\r\n              <Route path='/customer/calendar'>\r\n                <UserCalendar client={client} currentUser = {currentUser} />\r\n              </Route>\r\n              <Route path='/customer/profile'>\r\n                <UserProfile client={client} currentUser = {currentUser} cCurrentUser = {cCurrentUser} />\r\n              </Route>\r\n              <Route path='/volunteer/calendar'>\r\n                <VolunteerCalendar client={client} currentUser = {currentUser}/>\r\n              </Route>\r\n              <Route path='/volunteer/profile'>\r\n                <VolunteerProfile client={client} currentUser = {currentUser}/>\r\n              </Route>\r\n              <Route path='/cga/dashboard'>\r\n                <CgaDashboard client={client} currentUser = {currentUser}/>\r\n              </Route>\r\n              <Route path='/cga/create-session'>\r\n                <CgaCreateSessionMain client={client} currentUser = {currentUser}/>\r\n              </Route>\r\n              <Route path='/cga/view-users'>\r\n                <ViewUsers client={client} currentUser = {currentUser}/>\r\n              </Route> \r\n              <Route path='/home'>\r\n                <LandingPage client={client} />\r\n              </Route>\r\n              <Route path='/admin/calendar'>\r\n                <AdminCalendar client={client} currentUser = {currentUser}/>\r\n              </Route>\r\n              <Route path='/admin/register-customer'>\r\n                <UserRegister client={client}/>\r\n              </Route>\r\n              <Route path='/login/user'>\r\n                <UserLoginPage setUser = {(u => setUser(u))} loggedIn = {(t => login(t))} client = {client} cCurrentUser = {cCurrentUser}/>\r\n              </Route>\r\n              <Route path='/login/volunteer'>\r\n                <VolunteerLoginPage setUser = {(u => setUser(u))} loggedIn = {(t => login(t))} client = {client} cCurrentUser = {cCurrentUser}/>\r\n              </Route>\r\n              <Route path='/login/admin'>\r\n                <AdminLoginPage setUser = {(u => setUser(u))} loggedIn = {(t => login(t))} client = {client} cCurrentUser = {cCurrentUser}/>\r\n              </Route>\r\n              <Route path='/register'>\r\n                <CreateAccount client = {client}/>\r\n              </Route>\r\n              <Route path='/manager/calendar'>\r\n                <ManagerCalendar client={client} currentUser = {currentUser}/>\r\n              </Route>\r\n              <Route path='/manager/new-areas'>\r\n                <ManagerPage client={client} currentUser = {currentUser}/>\r\n              </Route>\r\n              <Route exact path='/'>\r\n                <LandingPage client={client} />\r\n              </Route>\r\n              <Route path='/'>Error: 404 not found</Route>\r\n            </Switch>\r\n          </Container>\r\n        </div>\r\n        <div className=\"footerOffset\">\r\n          <Footer currentUser = {currentUser}/>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}