{"version":3,"sources":["apiClient.js","App.js","reportWebVitals.js","index.js"],"names":["url","ApiClient","method","data","axios","catch","error","console","log","response","status","Promise","reject","this","apiCall","date","volunteer","App","useState","sessions","cSessions","client","useEffect","getSessions","then","className","map","session","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OACMA,EAAM,kCAECC,EAAb,uFAEI,SAAQC,EAAQF,EAAKG,GACjB,OAAOC,IAAM,CACTF,SACAF,MACAG,SACDE,OAAM,SAACC,GAEN,GADAC,QAAQC,IAAIF,GACkB,MAA1BA,EAAMG,SAASC,OACf,OAAOC,QAAQC,SAEf,MAAMN,OAZtB,yBAiBI,WACI,OAAOO,KAAKC,QAAQ,MAAOd,KAlBnC,wBAqBI,SAAWe,EAAMC,GACb,OAAOH,KAAKC,QAAQ,OAAQd,EAAK,CAAEe,OAAMC,kBAtBjD,K,eCyCeC,MAxCf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAS,IAAIpB,EAsBnB,OAJAqB,qBAAU,WAfRD,EAAOE,cAAcC,MAAK,SAACf,GAAD,OAAcW,EAAUX,EAASN,WAiB1D,IAGD,qBAAKsB,UAAU,MAAf,SACE,kCACE,gCACE,+BACE,sCACA,2CAGJ,iCAxBJlB,QAAQC,IAAIW,GACLA,EAASO,KAAI,SAACC,EAASC,GAC5B,OACE,+BACE,6BAAKD,EAAQZ,OACb,6BAAKY,EAAQX,cAFNY,eCJFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1f3ec8d0.chunk.js","sourcesContent":["import axios from \"axios\"\r\nconst url = \"https://golf-dka.herokuapp.com/\"\r\n\r\nexport class ApiClient {\r\n\r\n    apiCall(method, url, data) {\r\n        return axios({\r\n            method,\r\n            url,\r\n            data,\r\n        }).catch((error) => {\r\n            console.log(error)\r\n            if (error.response.status === 403) {\r\n                return Promise.reject()\r\n            } else {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n\r\n    getSessions() {\r\n        return this.apiCall(\"get\", url);\r\n    }\r\n\r\n    addSession(date, volunteer) {\r\n        return this.apiCall(\"post\", url, { date, volunteer });\r\n    }\r\n}","import React, { useState, useEffect } from \"react\"\nimport { ApiClient } from \"./apiClient\"\nimport './App.css'\n\nfunction App() {\n  const [sessions, cSessions] = useState([]);\n  const client = new ApiClient()\n\n  const refreshList = () => {\n    client.getSessions().then((response) => cSessions(response.data));\n  };\n\n  const makeSessionTable = () => {\n    console.log(sessions)\n    return sessions.map((session, index) => {\n      return (\n        <tr key={index}>\n          <td>{session.date}</td>\n          <td>{session.volunteer}</td>\n        </tr>\n      );\n    });\n  };\n\n  useEffect(() => {\n    refreshList();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <table>\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Test</th>\n          </tr>\n        </thead>\n        <tbody>{makeSessionTable()}</tbody>\n      </table>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}